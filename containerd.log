docs/Developer-Guide.md:            * [Enabling full `containerd` debug](#enabling-full-containerd-debug)
docs/Developer-Guide.md:            * [Enabling just `containerd shim` debug](#enabling-just-containerd-shim-debug)
docs/Developer-Guide.md:* [Run Kata Containers with Containerd](#run-kata-containers-with-containerd)
docs/Developer-Guide.md:- runtime binary: `/usr/local/bin/kata-runtime` and `/usr/local/bin/containerd-shim-kata-v2`
docs/Developer-Guide.md:If you are using `containerd` and the Kata `containerd-shimv2` to launch Kata Containers, and wish
docs/Developer-Guide.md:to enable Kata debug logging, there are two ways this can be enabled via the `containerd` configuration file,
docs/Developer-Guide.md:The Kata logs appear in the `containerd` log files, along with logs from `containerd` itself.
docs/Developer-Guide.md:For more information about `containerd` debug, please see the
docs/Developer-Guide.md:[`containerd` documentation](https://github.com/containerd/containerd/blob/master/docs/getting-started.md).
docs/Developer-Guide.md:#### Enabling full `containerd` debug
docs/Developer-Guide.md:Enabling full `containerd` debug also enables the shimv2 debug. Edit the `containerd` configuration file
docs/Developer-Guide.md:#### Enabling just `containerd shim` debug
docs/Developer-Guide.md:If you only wish to enable debug for the `containerd` shims themselves, just enable the debug
docs/Developer-Guide.md:option in the `plugins.linux` section of the `containerd` configuration file, such as:
docs/Developer-Guide.md:Refer to the [How to use Kata Containers and Containerd](how-to/containerd-kata.md) how-to guide.
docs/Developer-Guide.md:The kernel boot messages will appear in the `containerd` or `CRI-O` log appropriately,
docs/Developer-Guide.md:$ sudo journalctl -t containerd
docs/Upgrading.md:$ containerd-shim-kata-v2 --version
docs/Upgrading.md:with containerd.
docs/design/VSocks.md:with the containers is if the VM itself or the `containerd-shim-kata-v2` dies, if this happens
docs/design/architecture.md:[Containerd\*](https://github.com/containerd/containerd) implementation.
docs/design/architecture.md:The [`containerd-shim-kata-v2` (shown as `shimv2` from this point onwards)](../../src/runtime/containerd-shim-v2) 
docs/design/architecture.md:implements the [Containerd Runtime V2 (Shim API)](https://github.com/containerd/containerd/tree/master/runtime/v2) for Kata.
docs/design/architecture.md:Before `shimv2` (as done in [Kata Containers 1.x releases](https://github.com/kata-containers/runtime/releases)), we need to create a `containerd-shim` and a [`kata-shim`](https://github.com/kata-containers/shim) for each container and the Pod sandbox itself, plus an optional [`kata-proxy`](https://github.com/kata-containers/proxy) when VSOCK is not available. With `shimv2`, Kubernetes can launch Pod and OCI compatible containers with one shim (the `shimv2`) per Pod instead of `2N+1` shims, and no standalone `kata-proxy` process even if no VSOCK is available.
docs/design/architecture.md:as a daemon inside the virtual machine. `kata-agent` runs a [`ttRPC`](https://github.com/containerd/ttrpc-rust) server in
docs/design/architecture.md:stderr, stdin) between the containers and the manage engines (e.g. CRI-O or containerd).
docs/design/architecture.md:`containerd-shim-kata-v2` is a [containerd runtime shimv2](https://github.com/containerd/containerd/blob/v1.4.1/runtime/v2/README.md) implementation and is responsible for handling the `runtime v2 shim APIs`, which is similar to [the OCI runtime specification](https://github.com/opencontainers/runtime-spec) but simplifies the architecture by loading the runtime once and making RPC calls to handle the various container lifecycle commands. This refinement is an improvement on the OCI specification which requires the container manager call the runtime binary multiple times, at least once for each lifecycle command.
docs/design/architecture.md:`containerd-shim-kata-v2` heavily utilizes the
docs/design/architecture.md:The [devicemapper `snapshotter`](https://github.com/containerd/containerd/tree/master/snapshots/devmapper) is a special case. The `snapshotter` uses dedicated block devices rather than formatted filesystems, and operates at the block level rather than the file level. This knowledge is used to directly use the underlying block device instead of the overlay file system for the container root file system. The block device maps to the top read-write layer for the overlay. This approach gives much better I/O performance compared to using `virtio-fs` to share the container file system.
docs/design/architecture.md:[CRI-O\*](https://github.com/kubernetes-incubator/cri-o) and [Containerd\*](https://github.com/containerd/containerd/) are CRI implementations that rely on [OCI](https://github.com/opencontainers/runtime-spec)
docs/design/architecture.md:- [How to use Kata Containers and Containerd](../how-to/containerd-kata.md)
docs/design/architecture.md:With `RuntimeClass`, users can define Kata Containers as a `RuntimeClass` and then explicitly specify that a pod being created as a Kata Containers pod. For details, please refer to [How to use Kata Containers and Containerd](../../docs/how-to/containerd-kata.md).
docs/design/data/metrics.yaml:      title: Kata containerd shim v2 metrics
docs/design/data/metrics.yaml:      desc: Metrics about Kata containerd shim v2 process.
docs/design/data/metrics.yaml:          help: Kata containerd shim v2 open FDs.
docs/design/data/metrics.yaml:          help: Kata containerd shim v2 process IO statistics.
docs/design/data/metrics.yaml:          help: Kata containerd shim v2 network devices statistics.
docs/design/data/metrics.yaml:          help: Kata containerd shim v2 process statistics.
docs/design/data/metrics.yaml:          help: Kata containerd shim v2 process status.
docs/design/data/metrics.yaml:          help: Kata containerd shim v2 process threads.
docs/design/kata-2-0-metrics.md:  * [Kata containerd shim v2 metrics](#kata-containerd-shim-v2-metrics)
docs/design/kata-2-0-metrics.md:- containerd shim v2 (effectively `kata-runtime`)
docs/design/kata-2-0-metrics.md:> **Note**: In Kata 1.x, the main user-facing component was the runtime (`kata-runtime`). From 1.5, Kata then introduced the Kata containerd shim v2 (`containerd-shim-kata-v2`) which is essentially a modified runtime that is loaded by containerd to simplify and improve the way VM-based containers are created and managed.
docs/design/kata-2-0-metrics.md:> For Kata 2.0, the main component is the Kata containerd shim v2, although the deprecated `kata-runtime` binary will be maintained for a period of time.
docs/design/kata-2-0-metrics.md:> Any mention of the "Kata runtime" in this document should be taken to refer to the Kata containerd shim v2 unless explicitly noted otherwise (for example by referring to it explicitly as the `kata-runtime` binary).
docs/design/kata-2-0-metrics.md:The way `kata-monitor` get shim's metrics socket file(`monitor_address`) like that `containerd` get shim address. The socket is an abstract socket and saved as file `abstract` with the same directory of `address` for `containerd`.
docs/design/kata-2-0-metrics.md:* [Kata containerd shim v2 metrics](#kata-containerd-shim-v2-metrics)
docs/design/kata-2-0-metrics.md:### Kata containerd shim v2 metrics
docs/design/kata-2-0-metrics.md:Metrics about Kata containerd shim v2 process.
docs/design/kata-2-0-metrics.md:| `kata_shim_fds`: <br> Kata containerd shim v2 open FDs. | `GAUGE` |  | <ul><li>`sandbox_id`</li></ul> | 2.0.0 |
docs/design/kata-2-0-metrics.md:| `kata_shim_io_stat`: <br> Kata containerd shim v2 process IO statistics. | `GAUGE` |  | <ul><li>`item` (see `/proc/<pid>/io`)<ul><li>`cancelledwritebytes`</li><li>`rchar`</li><li>`readbytes`</li><li>`syscr`</li><li>`syscw`</li><li>`wchar`</li><li>`writebytes`</li></ul></li><li>`sandbox_id`</li></ul> | 2.0.0 |
docs/design/kata-2-0-metrics.md:| `kata_shim_netdev`: <br> Kata containerd shim v2 network devices statistics. | `GAUGE` |  | <ul><li>`interface` (network device name)</li><li>`item` (see `/proc/net/dev`)<ul><li>`recv_bytes`</li><li>`recv_compressed`</li><li>`recv_drop`</li><li>`recv_errs`</li><li>`recv_fifo`</li><li>`recv_frame`</li><li>`recv_multicast`</li><li>`recv_packets`</li><li>`sent_bytes`</li><li>`sent_carrier`</li><li>`sent_colls`</li><li>`sent_compressed`</li><li>`sent_drop`</li><li>`sent_errs`</li><li>`sent_fifo`</li><li>`sent_packets`</li></ul></li><li>`sandbox_id`</li></ul> | 2.0.0 |
docs/design/kata-2-0-metrics.md:| `kata_shim_proc_stat`: <br> Kata containerd shim v2 process statistics. | `GAUGE` |  | <ul><li>`item` (see `/proc/<pid>/stat`)<ul><li>`cstime`</li><li>`cutime`</li><li>`stime`</li><li>`utime`</li></ul></li><li>`sandbox_id`</li></ul> | 2.0.0 |
docs/design/kata-2-0-metrics.md:| `kata_shim_proc_status`: <br> Kata containerd shim v2 process status. | `GAUGE` |  | <ul><li>`item` (see `/proc/<pid>/status`)<ul><li>`hugetlbpages`</li><li>`nonvoluntary_ctxt_switches`</li><li>`rssanon`</li><li>`rssfile`</li><li>`rssshmem`</li><li>`vmdata`</li><li>`vmexe`</li><li>`vmhwm`</li><li>`vmlck`</li><li>`vmlib`</li><li>`vmpeak`</li><li>`vmpin`</li><li>`vmpmd`</li><li>`vmpte`</li><li>`vmrss`</li><li>`vmsize`</li><li>`vmstk`</li><li>`vmswap`</li><li>`voluntary_ctxt_switches`</li></ul></li><li>`sandbox_id`</li></ul> | 2.0.0 |
docs/design/kata-2-0-metrics.md:| `kata_shim_threads`: <br> Kata containerd shim v2 process threads. | `GAUGE` |  | <ul><li>`sandbox_id`</li></ul> | 2.0.0 |
docs/design/kata-design-requirements.md:This interface is used by implementations such as [`CRI-O`](http://cri-o.io) and [`cri-containerd`](https://github.com/containerd/cri-containerd), for example.
docs/design/virtualization.md:Kubelet will interact with a CRI implementor (such as containerd or CRI-O), which will in turn interface with Kata Containers (an OCI based runtime).
docs/how-to/README.md:- [How to use Kata Containers and Containerd](containerd-kata.md)
docs/how-to/README.md:- [How to use Kata Containers and CRI (containerd plugin) with Kubernetes](how-to-use-k8s-with-cri-containerd-and-kata.md)
docs/how-to/containerd-kata.md:    - [Containerd Runtime V2 API: Shim V2 API](#containerd-runtime-v2-api-shim-v2-api)
docs/how-to/containerd-kata.md:    - [Install containerd with CRI plugin](#install-containerd-with-cri-plugin)
docs/how-to/containerd-kata.md:    - [Configure containerd to use Kata Containers](#configure-containerd-to-use-kata-containers)
docs/how-to/containerd-kata.md:This document covers the installation and configuration of [containerd](https://containerd.io/) 
docs/how-to/containerd-kata.md:and [Kata Containers](https://katacontainers.io). The containerd provides not only the `ctr`
docs/how-to/containerd-kata.md:This document is primarily written for Kata Containers v1.5.0-rc2 or above, and containerd v1.2.0 or above. 
docs/how-to/containerd-kata.md:use to run a pod’s containers. This feature is supported in `containerd` since [v1.2.0](https://github.com/containerd/containerd/releases/tag/v1.2.0).
docs/how-to/containerd-kata.md:- The containerd introduced an annotation for untrusted Pods since [v1.0](https://github.com/containerd/cri/blob/v1.0.0-rc.0/docs/config.md):
docs/how-to/containerd-kata.md:The [`containerd-shim-kata-v2` (short as `shimv2` in this documentation)](../../src/runtime/containerd-shim-v2) 
docs/how-to/containerd-kata.md:implements the [Containerd Runtime V2 (Shim API)](https://github.com/containerd/containerd/tree/master/runtime/v2) for Kata.
docs/how-to/containerd-kata.md:shims (i.e. a `containerd-shim` and a `kata-shim` for each container and the Pod sandbox itself) and no standalone `kata-proxy` 
docs/how-to/containerd-kata.md:The shim v2 is introduced in containerd [v1.2.0](https://github.com/containerd/containerd/releases/tag/v1.2.0) and Kata `shimv2`
docs/how-to/containerd-kata.md:### Install containerd with CRI plugin
docs/how-to/containerd-kata.md:> **Note:** `cri` is a native plugin of containerd 1.1 and above. It is built into containerd and enabled by default.
docs/how-to/containerd-kata.md:> You do not need to install `cri` if you have containerd 1.1 or above. Just remove the `cri` plugin from the list of
docs/how-to/containerd-kata.md:> `disabled_plugins` in the containerd configuration file (`/etc/containerd/config.toml`).
docs/how-to/containerd-kata.md:Follow the instructions from the [CRI installation guide](http://github.com/containerd/cri/blob/master/docs/installation.md).
docs/how-to/containerd-kata.md:Then, check if `containerd` is now available:
docs/how-to/containerd-kata.md:$ command -v containerd
docs/how-to/containerd-kata.md:> **Note:** You do not need to install CNI plugins if you do not want to use containerd with Kubernetes.
docs/how-to/containerd-kata.md:> to use containerd with Kubernetes can skip the `cri-tools`.
docs/how-to/containerd-kata.md:### Configure containerd to use Kata Containers
docs/how-to/containerd-kata.md:By default, the configuration of containerd is located at `/etc/containerd/config.toml`, and the 
docs/how-to/containerd-kata.md:    [plugins.cri.containerd]
docs/how-to/containerd-kata.md:      [plugins.cri.containerd.default_runtime]
docs/how-to/containerd-kata.md:        #runtime_type = "io.containerd.runtime.v1.linux"
docs/how-to/containerd-kata.md:- `plugins.cri.containerd.runtimes.runc`: the runc, and it is the default runtime.
docs/how-to/containerd-kata.md:- `plugins.cri.containerd.runtimes.kata`: The function in containerd (reference [the document here](https://github.com/containerd/containerd/tree/master/runtime/v2#binary-naming)) 
docs/how-to/containerd-kata.md:  where the dot-connected string `io.containerd.kata.v2` is translated to `containerd-shim-kata-v2` (i.e. the 
docs/how-to/containerd-kata.md:  binary name of the Kata implementation of [Containerd Runtime V2 (Shim API)](https://github.com/containerd/containerd/tree/master/runtime/v2)).
docs/how-to/containerd-kata.md:- `plugins.cri.containerd.runtimes.katacli`: the `containerd-shim-runc-v1` calls `kata-runtime`, which is the legacy process.
docs/how-to/containerd-kata.md:    [plugins.cri.containerd]
docs/how-to/containerd-kata.md:    [plugins.cri.containerd.runtimes]
docs/how-to/containerd-kata.md:      [plugins.cri.containerd.runtimes.runc]
docs/how-to/containerd-kata.md:         runtime_type = "io.containerd.runc.v1"
docs/how-to/containerd-kata.md:         [plugins.cri.containerd.runtimes.runc.options]
docs/how-to/containerd-kata.md:      [plugins.cri.containerd.runtimes.kata]
docs/how-to/containerd-kata.md:         runtime_type = "io.containerd.kata.v2"
docs/how-to/containerd-kata.md:      [plugins.cri.containerd.runtimes.katacli]
docs/how-to/containerd-kata.md:         runtime_type = "io.containerd.runc.v1"
docs/how-to/containerd-kata.md:         [plugins.cri.containerd.runtimes.katacli.options]
docs/how-to/containerd-kata.md:      [plugins.cri.containerd.runtimes.kata]
docs/how-to/containerd-kata.md:         runtime_type = "io.containerd.kata.v2"
docs/how-to/containerd-kata.md:	 [plugins.cri.containerd.runtimes.kata.options]
docs/how-to/containerd-kata.md:`privileged_without_host_devices` tells containerd that a privileged Kata container should not have direct access to all host devices. If unset, containerd will pass all host devices to Kata container, which may cause security issues.
docs/how-to/containerd-kata.md:KATA_CONF_FILE=/etc/kata-containers/firecracker.toml containerd-shim-kata-v2 $@
docs/how-to/containerd-kata.md:Name it as `/usr/local/bin/containerd-shim-katafc-v2` and reference it in the configuration of containerd:
docs/how-to/containerd-kata.md:      [plugins.cri.containerd.runtimes.kata-firecracker]
docs/how-to/containerd-kata.md:         runtime_type = "io.containerd.katafc.v2"
docs/how-to/containerd-kata.md:    [plugins.cri.containerd]
docs/how-to/containerd-kata.md:    # "plugins.cri.containerd.default_runtime" is the runtime to use in containerd.
docs/how-to/containerd-kata.md:    [plugins.cri.containerd.default_runtime]
docs/how-to/containerd-kata.md:      # runtime_type is the runtime type to use in containerd e.g. io.containerd.runtime.v1.linux
docs/how-to/containerd-kata.md:      runtime_type = "io.containerd.runtime.v1.linux"
docs/how-to/containerd-kata.md:    # "plugins.cri.containerd.untrusted_workload_runtime" is a runtime to run untrusted workloads on it.
docs/how-to/containerd-kata.md:    [plugins.cri.containerd.untrusted_workload_runtime]
docs/how-to/containerd-kata.md:      # runtime_type is the runtime type to use in containerd e.g. io.containerd.runtime.v1.linux
docs/how-to/containerd-kata.md:      runtime_type = "io.containerd.kata.v2"
docs/how-to/containerd-kata.md:For the earlier versions of Kata Containers and containerd that do not support Runtime V2 (Shim API), you can use the following alternative configuration:
docs/how-to/containerd-kata.md:    [plugins.cri.containerd]
docs/how-to/containerd-kata.md:    # "plugins.cri.containerd.default_runtime" is the runtime to use in containerd.
docs/how-to/containerd-kata.md:    [plugins.cri.containerd.default_runtime]
docs/how-to/containerd-kata.md:      # runtime_type is the runtime type to use in containerd e.g. io.containerd.runtime.v1.linux
docs/how-to/containerd-kata.md:      runtime_type = "io.containerd.runtime.v1.linux"
docs/how-to/containerd-kata.md:    # "plugins.cri.containerd.untrusted_workload_runtime" is a runtime to run untrusted workloads on it.
docs/how-to/containerd-kata.md:    [plugins.cri.containerd.untrusted_workload_runtime]
docs/how-to/containerd-kata.md:      # runtime_type is the runtime type to use in containerd e.g. io.containerd.runtime.v1.linux
docs/how-to/containerd-kata.md:      runtime_type = "io.containerd.runtime.v1.linux"
docs/how-to/containerd-kata.md:      # runtime_engine is the name of the runtime engine used by containerd.
docs/how-to/containerd-kata.md:You can find more information on the [Containerd config documentation](https://github.com/containerd/cri/blob/master/docs/config.md)
docs/how-to/containerd-kata.md:    [plugins.cri.containerd]
docs/how-to/containerd-kata.md:    [plugins.cri.containerd.default_runtime]
docs/how-to/containerd-kata.md:      runtime_type = "io.containerd.kata.v2"
docs/how-to/containerd-kata.md:Alternatively, for the earlier versions of Kata Containers and containerd that do not support Runtime V2 (Shim API), you can use the following alternative configuration:
docs/how-to/containerd-kata.md:    [plugins.cri.containerd]
docs/how-to/containerd-kata.md:    [plugins.cri.containerd.default_runtime]
docs/how-to/containerd-kata.md:      runtime_type = "io.containerd.runtime.v1.linux"
docs/how-to/containerd-kata.md:First, add the CNI configuration in the containerd configuration. 
docs/how-to/containerd-kata.md:Next, reference the configuration directory through containerd `config.toml`:
docs/how-to/containerd-kata.md:runtime-endpoint: unix:///var/run/containerd/containerd.sock
docs/how-to/containerd-kata.md:image-endpoint: unix:///var/run/containerd/containerd.sock
docs/how-to/containerd-kata.md:To run a container with Kata Containers through the containerd command line, you can run the following:
docs/how-to/containerd-kata.md:$ sudo ctr run --runtime io.containerd.run.kata.v2 -t --rm docker.io/library/busybox:latest hello sh
docs/how-to/data/kata-monitor-daemonset.yml:        - name: containerdtask
docs/how-to/data/kata-monitor-daemonset.yml:          mountPath: /run/containerd/io.containerd.runtime.v2.task/
docs/how-to/data/kata-monitor-daemonset.yml:        - name: containerdsocket
docs/how-to/data/kata-monitor-daemonset.yml:          mountPath: /run/containerd/containerd.sock
docs/how-to/data/kata-monitor-daemonset.yml:      - name: containerdtask
docs/how-to/data/kata-monitor-daemonset.yml:          path: /run/containerd/io.containerd.runtime.v2.task/
docs/how-to/data/kata-monitor-daemonset.yml:      - name: containerdsocket
docs/how-to/data/kata-monitor-daemonset.yml:          path: /run/containerd/containerd.sock
docs/how-to/how-to-import-kata-logs-with-fluentd.md:When using the Kata `shimv2` runtime with `containerd`, as described in this
docs/how-to/how-to-import-kata-logs-with-fluentd.md:[how-to guide](containerd-kata.md#containerd-runtime-v2-api-shim-v2-api), the Kata logs are routed
docs/how-to/how-to-import-kata-logs-with-fluentd.md:- The Kata logs are directed via `containerd`, and will be captured along with the `containerd` logs,
docs/how-to/how-to-import-kata-logs-with-fluentd.md:  such as on the containerd stdout or in the system journal.
docs/how-to/how-to-import-kata-logs-with-fluentd.md:the `containerd` and Kata logs from the system journal by filtering on the Kata `SYSLOG_IDENTIFIER` field,
docs/how-to/how-to-import-kata-logs-with-fluentd.md:      # capture the containerd logs
docs/how-to/how-to-import-kata-logs-with-fluentd.md:      filters [{ "_SYSTEMD_UNIT": "containerd.service" }]
docs/how-to/how-to-import-kata-logs-with-fluentd.md:      pos_file /tmp/systemd-containerd.pos
docs/how-to/how-to-import-kata-logs-with-fluentd.md:      tag containerd_tmp_tag
docs/how-to/how-to-import-kata-logs-with-fluentd.md:    # filter out and split between kata entries and containerd entries
docs/how-to/how-to-import-kata-logs-with-fluentd.md:    <match containerd_tmp_tag>
docs/how-to/how-to-import-kata-logs-with-fluentd.md:      # Anything that was not matched so far, tag as containerd
docs/how-to/how-to-import-kata-logs-with-fluentd.md:        tag containerd_tag
docs/how-to/how-to-set-prometheus-in-k8s.md:>   - [How to use Kata Containers and Containerd](containerd-kata.md)
docs/how-to/how-to-set-prometheus-in-k8s.md:>   - [How to use Kata Containers and CRI (containerd plugin) with Kubernetes](how-to-use-k8s-with-cri-containerd-and-kata.md)
docs/how-to/how-to-set-sandbox-config-kata.md:For containerd, annotations specified in the pod spec are passed down to Kata
docs/how-to/how-to-set-sandbox-config-kata.md:starting with version `1.3.0` of containerd. Additionally, extra configuration is
docs/how-to/how-to-set-sandbox-config-kata.md:needed for containerd, by providing a `pod_annotations` field in the containerd config
docs/how-to/how-to-set-sandbox-config-kata.md:for passing annotations to Kata from containerd:
docs/how-to/how-to-set-sandbox-config-kata.md:$ cat /etc/containerd/config
docs/how-to/how-to-set-sandbox-config-kata.md:[plugins.cri.containerd.runtimes.kata]
docs/how-to/how-to-set-sandbox-config-kata.md:           runtime_type = "io.containerd.runc.v1"
docs/how-to/how-to-set-sandbox-config-kata.md:           [plugins.cri.containerd.runtimes.kata.options]
docs/how-to/how-to-set-sandbox-config-kata.md:[containerd docs](https://github.com/containerd/cri/blob/8d5a8355d07783ba2f8f451209f6bdcc7c412346/docs/config.md).
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:# How to use Kata Containers and CRI (containerd plugin) with Kubernetes
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:* [Install and configure containerd](#install-and-configure-containerd)
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:    * [Configure Kubelet to use containerd](#configure-kubelet-to-use-containerd)
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:[CRI containerd plugin](https://github.com/containerd/cri) and
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:For Kata Containers 1.5.0-rc2 and above, we will use `containerd-shim-kata-v2` (short as `shimv2` in this documentation)
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:- containerd with `cri` plug-in
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:## Install and configure containerd
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:First, follow the [How to use Kata Containers and Containerd](containerd-kata.md) to install and configure containerd. 
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:Then, make sure the containerd works with the [examples in it](containerd-kata.md#run).
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:### Configure Kubelet to use containerd
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:In order to allow Kubelet to use containerd (using the CRI interface), configure the service to point to the `containerd` socket.
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:- Configure Kubernetes to use `containerd`
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:  $ cat << EOF | sudo tee  /etc/systemd/system/kubelet.service.d/0-containerd.conf
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:  Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock"
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:If you are behind a proxy, use the following script to configure your proxy for docker, Kubelet, and containerd:
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:containerd
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:- Make sure `containerd` is up and running
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:  $ sudo systemctl restart containerd
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:  $ sudo systemctl status containerd
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:  $ sudo kubeadm init --cri-socket /run/containerd/containerd.sock --pod-network-cidr=10.244.0.0/16
docs/how-to/how-to-use-k8s-with-cri-containerd-and-kata.md:By default, all pods are created with the default runtime configured in CRI containerd plugin.
docs/how-to/privileged.md:        * [Containerd and CRI](#containerd-and-cri)
docs/how-to/privileged.md:Support for configuring privileged host devices behaviour was added in containerd `1.3.0` version.
docs/how-to/privileged.md:    [plugins.cri.containerd]
docs/how-to/privileged.md:       [plugins.cri.containerd.runtimes.runc]
docs/how-to/privileged.md:         runtime_type = "io.containerd.runc.v1"
docs/how-to/privileged.md:       [plugins.cri.containerd.runtimes.kata]
docs/how-to/privileged.md:         runtime_type = "io.containerd.kata.v2"
docs/how-to/privileged.md:         [plugins.cri.containerd.runtimes.kata.options]
docs/how-to/privileged.md: - [Kata Containers with Containerd and CRI documentation](how-to-use-k8s-with-cri-containerd-and-kata.md)
docs/how-to/privileged.md: - [Containerd CRI config documentation](https://github.com/containerd/cri/blob/master/docs/config.md)
docs/how-to/privileged.md:Similar to containerd, CRI-O allows configuring the privileged host devices
docs/how-to/privileged.md:  runtime_path = "/usr/local/bin/containerd-shim-kata-v2"
docs/how-to/run-kata-with-crictl.md:> **Note:** For how to install and configure `cri-tools` with CRI runtimes like `containerd` or CRI-O, please also refer to other [howtos](./README.md).
docs/how-to/run-kata-with-k8s.md:     * [containerd with CRI plugin](#containerd-with-cri-plugin)
docs/how-to/run-kata-with-k8s.md:     * [Configure for containerd](#configure-for-containerd)
docs/how-to/run-kata-with-k8s.md:[CRI-containerd](https://github.com/containerd/cri) CRI implementations.
docs/how-to/run-kata-with-k8s.md:Kata Containers 1.5 introduced the `shimv2` for containerd 1.2.0, reducing the components
docs/how-to/run-kata-with-k8s.md:required to spawn pods and containers, and this is the preferred way to run Kata Containers with Kubernetes ([as documented here](../how-to/how-to-use-k8s-with-cri-containerd-and-kata.md#configure-containerd-to-use-kata-containers)).
docs/how-to/run-kata-with-k8s.md:### containerd with CRI plugin
docs/how-to/run-kata-with-k8s.md:If you select containerd with `cri` plugin, follow the "Getting Started for Developers"
docs/how-to/run-kata-with-k8s.md:instructions [here](https://github.com/containerd/cri#getting-started-for-developers)
docs/how-to/run-kata-with-k8s.md:To customize containerd to select Kata Containers runtime, follow our
docs/how-to/run-kata-with-k8s.md:"Configure containerd to use Kata Containers" internal documentation
docs/how-to/run-kata-with-k8s.md:[here](../how-to/how-to-use-k8s-with-cri-containerd-and-kata.md#configure-containerd-to-use-kata-containers).
docs/how-to/run-kata-with-k8s.md:### Configure for containerd
docs/how-to/run-kata-with-k8s.md:`/etc/systemd/system/kubelet.service.d/0-cri-containerd.conf`
docs/how-to/run-kata-with-k8s.md:Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock"
docs/how-to/run-kata-with-k8s.md:For more information about containerd see the "Configure Kubelet to use containerd"
docs/how-to/run-kata-with-k8s.md:documentation [here](../how-to/how-to-use-k8s-with-cri-containerd-and-kata.md#configure-kubelet-to-use-containerd).
docs/how-to/run-kata-with-k8s.md:# If using CRI-containerd
docs/how-to/run-kata-with-k8s.md:$ sudo kubeadm init --skip-preflight-checks --cri-socket /run/containerd/containerd.sock --pod-network-cidr=10.244.0.0/16
docs/how-to/service-mesh.md:You can choose between CRI-O and CRI-containerd, both are supported
docs/how-to/service-mesh.md:For both CRI-O and CRI-containerd, you have to add an annotation indicating
docs/how-to/service-mesh.md:__CRI-containerd:__
docs/how-to/service-mesh.md:Add the following annotation for CRI-containerd
docs/how-to/what-is-vm-templating-and-how-do-I-use-it.md:In another example, we created ten Kata Containers with containerd shimv2
docs/install/README.md:Follow the [containerd installation guide](container-manager/containerd/containerd-install.md).
docs/install/container-manager/containerd/containerd-install.md:# Install Kata Containers with containerd
docs/install/container-manager/containerd/containerd-install.md:> - If Kata Containers and / or containerd are packaged by your distribution,
docs/install/container-manager/containerd/containerd-install.md:>   containerd from binary release packages. These versions may not have been
docs/install/container-manager/containerd/containerd-install.md:   for containerd will not need to be modified to allow the daemon to find this
docs/install/container-manager/containerd/containerd-install.md:   binary (see the [section on installing containerd](#install-containerd) below).
docs/install/container-manager/containerd/containerd-install.md:   | `/opt/kata/bin/containerd-shim-kata-v2` | The main Kata 2.x binary |
docs/install/container-manager/containerd/containerd-install.md:## Install containerd
docs/install/container-manager/containerd/containerd-install.md:> If your distribution packages containerd, we recommend you install that
docs/install/container-manager/containerd/containerd-install.md:  - https://github.com/containerd/containerd/releases
docs/install/container-manager/containerd/containerd-install.md:- Configure containerd
docs/install/container-manager/containerd/containerd-install.md:    - https://raw.githubusercontent.com/containerd/containerd/master/containerd.service
docs/install/container-manager/containerd/containerd-install.md:    >   `/opt/kata/bin/containerd-shim-kata-v2`, you will need to modify this
docs/install/container-manager/containerd/containerd-install.md:    >   file to ensure the containerd daemon's `PATH` contains `/opt/kata/`.
docs/install/container-manager/containerd/containerd-install.md:  - Add the Kata Containers configuration to the containerd configuration file:
docs/install/container-manager/containerd/containerd-install.md:            [plugins.cri.containerd]
docs/install/container-manager/containerd/containerd-install.md:            [plugins.cri.containerd.runtimes.kata]
docs/install/container-manager/containerd/containerd-install.md:            runtime_type = "io.containerd.kata.v2"
docs/install/container-manager/containerd/containerd-install.md:    > The containerd daemon needs to be able to find the
docs/install/container-manager/containerd/containerd-install.md:    > `containerd-shim-kata-v2` binary to allow Kata Containers to be created.
docs/install/container-manager/containerd/containerd-install.md:  - Start the containerd service.
docs/install/container-manager/containerd/containerd-install.md:$ sudo ctr run --runtime "io.containerd.kata.v2" --rm -t "$image" test-kata uname -r
docs/install/minikube-installation-guide.md:Minikube can be set up to use either CRI-O or containerd.
docs/install/minikube-installation-guide.md:To use containerd, modify the `--container-runtime` argument:
docs/install/minikube-installation-guide.md:| `--container-runtime=containerd` | Using containerd for Kata |
snap/snapcraft.yaml:    command: usr/bin/containerd-shim-kata-v2
src/agent/Cargo.lock:source = "git+https://github.com/containerd/ttrpc-rust.git?branch=0.3.0#ba1efe3bbb8f8af4895b7623ed1d11561e70e566"
src/agent/Cargo.toml:ttrpc = { git = "https://github.com/containerd/ttrpc-rust.git", branch="0.3.0" }
src/agent/README.md:$sudo -E PATH=$PATH -E GOPATH=$GOPATH integration/containerd/shimv2/shimv2-tests.sh
src/agent/protocols/Cargo.toml:ttrpc = { git = "https://github.com/containerd/ttrpc-rust.git", branch="0.3.0" }
src/agent/protocols/hack/update-generated-proto.sh:[ $? -eq 0 ] || die "Please install ttrpc_rust_plugin from https://github.com/containerd/ttrpc-rust"
src/agent/protocols/hack/update-generated-proto.sh:[ $? -eq 0 ] || die "Please install protoc-gen-gogottrpc from https://github.com/containerd/ttrpc"
src/runtime/.gitignore:/cli/containerd-shim-kata-v2/config-generated.go
src/runtime/.gitignore:/containerd-shim-kata-v2
src/runtime/.gitignore:/containerd-shim-v2/monitor_address
src/runtime/Makefile:SHIMV2 = containerd-shim-kata-v2
src/runtime/Makefile:all: runtime containerd-shim-v2 netmon monitor
src/runtime/Makefile:containerd-shim-v2: $(SHIMV2_OUTPUT)
src/runtime/Makefile:install: default install-runtime install-containerd-shim-v2 install-monitor install-netmon
src/runtime/Makefile:install-containerd-shim-v2: $(SHIMV2)
src/runtime/Makefile:	@printf "\tcontainerd-shim-v2         : only build containerd shim v2.\n"
src/runtime/Makefile:	@printf "\tinstall-containerd-shim-v2 : only install containerd shim v2 files.\n"
src/runtime/README.md:    * [Kata containerd shimv2](#kata-containerd-shimv2)
src/runtime/README.md:[Containerd](https://github.com/containerd/containerd)-compatible,
src/runtime/README.md:For runtime logs, see the following sections for the CRI-O and containerd shimv2 based runtimes.
src/runtime/README.md:### Kata containerd shimv2
src/runtime/README.md:The Kata containerd shimv2 runtime logs through `containerd`, and its logs will be sent
src/runtime/README.md:to wherever the `containerd` logs are directed. However, the
src/runtime/cli/containerd-shim-kata-v2/main.go:	"github.com/containerd/containerd/runtime/v2/shim"
src/runtime/cli/containerd-shim-kata-v2/main.go:	containerdshim "github.com/kata-containers/kata-containers/src/runtime/containerd-shim-v2"
src/runtime/cli/containerd-shim-kata-v2/main.go:		fmt.Printf("%s containerd shim: id: %q, version: %s, commit: %v\n", project, types.DefaultKataRuntimeName, version, commit)
src/runtime/cli/containerd-shim-kata-v2/main.go:	shim.Run(types.DefaultKataRuntimeName, containerdshim.New, shimConfig)
src/runtime/cli/kata-exec.go:	"github.com/containerd/console"
src/runtime/cli/kata-monitor/main.go:var containerdAddr = flag.String("containerd-address", "/run/containerd/containerd.sock", "Containerd address to accept client requests.")
src/runtime/cli/kata-monitor/main.go:var containerdConfig = flag.String("containerd-conf", "/etc/containerd/config.toml", "Containerd config file.")
src/runtime/cli/kata-monitor/main.go:	km, err := kataMonitor.NewKataMonitor(*containerdAddr, *containerdConfig)
src/runtime/containerd-shim-v2/container.go:package containerdshim
src/runtime/containerd-shim-v2/container.go:	"github.com/containerd/containerd/api/types/task"
src/runtime/containerd-shim-v2/container.go:	"github.com/containerd/containerd/errdefs"
src/runtime/containerd-shim-v2/container.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/container_test.go:package containerdshim
src/runtime/containerd-shim-v2/container_test.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/create.go:package containerdshim
src/runtime/containerd-shim-v2/create.go:	containerd_types "github.com/containerd/containerd/api/types"
src/runtime/containerd-shim-v2/create.go:	"github.com/containerd/containerd/mount"
src/runtime/containerd-shim-v2/create.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/create.go:	"github.com/containerd/typeurl"
src/runtime/containerd-shim-v2/create.go:	_ "github.com/containerd/containerd/runtime/linux/runctypes"
src/runtime/containerd-shim-v2/create.go:	crioption "github.com/containerd/cri-containerd/pkg/api/runtimeoptions/v1"
src/runtime/containerd-shim-v2/create.go:func doMount(mounts []*containerd_types.Mount, rootfs string) error {
src/runtime/containerd-shim-v2/create_test.go:package containerdshim
src/runtime/containerd-shim-v2/create_test.go:	"github.com/containerd/containerd/namespaces"
src/runtime/containerd-shim-v2/create_test.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/create_test.go:	crioption "github.com/containerd/cri-containerd/pkg/api/runtimeoptions/v1"
src/runtime/containerd-shim-v2/create_test.go:	"github.com/containerd/typeurl"
src/runtime/containerd-shim-v2/delete.go:package containerdshim
src/runtime/containerd-shim-v2/delete.go:	"github.com/containerd/containerd/api/types/task"
src/runtime/containerd-shim-v2/delete.go:	"github.com/containerd/containerd/mount"
src/runtime/containerd-shim-v2/delete_test.go:package containerdshim
src/runtime/containerd-shim-v2/delete_test.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/errors.go:package containerdshim
src/runtime/containerd-shim-v2/errors_test.go:package containerdshim
src/runtime/containerd-shim-v2/exec.go:package containerdshim
src/runtime/containerd-shim-v2/exec.go:	"github.com/containerd/containerd/api/types/task"
src/runtime/containerd-shim-v2/exec.go:	"github.com/containerd/containerd/errdefs"
src/runtime/containerd-shim-v2/exec.go:	"github.com/containerd/typeurl"
src/runtime/containerd-shim-v2/exec_test.go:package containerdshim
src/runtime/containerd-shim-v2/exec_test.go:	"github.com/containerd/containerd/namespaces"
src/runtime/containerd-shim-v2/exec_test.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/metrics.go:package containerdshim
src/runtime/containerd-shim-v2/metrics.go:	"github.com/containerd/cgroups"
src/runtime/containerd-shim-v2/metrics.go:	"github.com/containerd/typeurl"
src/runtime/containerd-shim-v2/metrics_test.go:package containerdshim
src/runtime/containerd-shim-v2/metrics_test.go:	"github.com/containerd/cgroups"
src/runtime/containerd-shim-v2/pause_test.go:package containerdshim
src/runtime/containerd-shim-v2/pause_test.go:	"github.com/containerd/containerd/namespaces"
src/runtime/containerd-shim-v2/pause_test.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/service.go:package containerdshim
src/runtime/containerd-shim-v2/service.go:	eventstypes "github.com/containerd/containerd/api/events"
src/runtime/containerd-shim-v2/service.go:	"github.com/containerd/containerd/api/types/task"
src/runtime/containerd-shim-v2/service.go:	"github.com/containerd/containerd/errdefs"
src/runtime/containerd-shim-v2/service.go:	"github.com/containerd/containerd/events"
src/runtime/containerd-shim-v2/service.go:	"github.com/containerd/containerd/namespaces"
src/runtime/containerd-shim-v2/service.go:	cdruntime "github.com/containerd/containerd/runtime"
src/runtime/containerd-shim-v2/service.go:	cdshim "github.com/containerd/containerd/runtime/v2/shim"
src/runtime/containerd-shim-v2/service.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/service.go:	"github.com/containerd/typeurl"
src/runtime/containerd-shim-v2/service.go:	// it to containerd as the containerd event format.
src/runtime/containerd-shim-v2/service.go:	// A time span used to wait for publish a containerd event,
src/runtime/containerd-shim-v2/service.go:var shimLog = logrus.WithField("source", "containerd-kata-shim-v2")
src/runtime/containerd-shim-v2/service.go:	// it will output into stdio, from which containerd would like
src/runtime/containerd-shim-v2/service.go:func newCommand(ctx context.Context, containerdBinary, id, containerdAddress string) (*sysexec.Cmd, error) {
src/runtime/containerd-shim-v2/service.go:		"-address", containerdAddress,
src/runtime/containerd-shim-v2/service.go:		"-publish-binary", containerdBinary,
src/runtime/containerd-shim-v2/service.go:func (s *service) StartShim(ctx context.Context, id, containerdBinary, containerdAddress string) (string, error) {
src/runtime/containerd-shim-v2/service.go:	cmd, err := newCommand(ctx, containerdBinary, id, containerdAddress)
src/runtime/containerd-shim-v2/service.go:	//containerd, thus we must make sure there is no any outputs in stdout except
src/runtime/containerd-shim-v2/shim_management.go:package containerdshim
src/runtime/containerd-shim-v2/shim_management.go:	"github.com/containerd/containerd/namespaces"
src/runtime/containerd-shim-v2/shim_management.go:	cdshim "github.com/containerd/containerd/runtime/v2/shim"
src/runtime/containerd-shim-v2/shim_management.go:	return filepath.Join(string(filepath.Separator), "containerd-shim", ns, id, "shim-monitor.sock"), nil
src/runtime/containerd-shim-v2/shim_management_test.go:package containerdshim
src/runtime/containerd-shim-v2/shim_metrics.go:package containerdshim
src/runtime/containerd-shim-v2/shim_metrics.go:		Help:      "Kata containerd shim v2 process threads.",
src/runtime/containerd-shim-v2/shim_metrics.go:		Help:      "Kata containerd shim v2 process status.",
src/runtime/containerd-shim-v2/shim_metrics.go:		Help:      "Kata containerd shim v2 process statistics.",
src/runtime/containerd-shim-v2/shim_metrics.go:		Help:      "Kata containerd shim v2 network devices statistics.",
src/runtime/containerd-shim-v2/shim_metrics.go:		Help:      "Kata containerd shim v2 process IO statistics.",
src/runtime/containerd-shim-v2/shim_metrics.go:		Help:      "Kata containerd shim v2 open FDs.",
src/runtime/containerd-shim-v2/shim_metrics_test.go:package containerdshim
src/runtime/containerd-shim-v2/start.go:package containerdshim
src/runtime/containerd-shim-v2/start.go:	"github.com/containerd/containerd/api/types/task"
src/runtime/containerd-shim-v2/start_test.go:package containerdshim
src/runtime/containerd-shim-v2/start_test.go:	"github.com/containerd/containerd/namespaces"
src/runtime/containerd-shim-v2/start_test.go:	taskAPI "github.com/containerd/containerd/runtime/v2/task"
src/runtime/containerd-shim-v2/stream.go:package containerdshim
src/runtime/containerd-shim-v2/stream.go:	"github.com/containerd/fifo"
src/runtime/containerd-shim-v2/stream_test.go:package containerdshim
src/runtime/containerd-shim-v2/stream_test.go:	"github.com/containerd/fifo"
src/runtime/containerd-shim-v2/utils.go:package containerdshim
src/runtime/containerd-shim-v2/utils.go:	"github.com/containerd/containerd/mount"
src/runtime/containerd-shim-v2/utils.go:	cdshim "github.com/containerd/containerd/runtime/v2/shim"
src/runtime/containerd-shim-v2/utils_test.go:package containerdshim
src/runtime/containerd-shim-v2/wait.go:package containerdshim
src/runtime/containerd-shim-v2/wait.go:	"github.com/containerd/containerd/api/events"
src/runtime/containerd-shim-v2/wait.go:	"github.com/containerd/containerd/api/types/task"
src/runtime/containerd-shim-v2/wait.go:	"github.com/containerd/containerd/mount"
src/runtime/containerd-shim-v2/wait.go:			// publish event for containerd
src/runtime/data/kata-collect-data.sh.in:typeset -r containerd_shim_v2_name="containerd-shim-kata-v2"
src/runtime/data/kata-collect-data.sh.in:typeset -r containerd_shim_v2=$(command -v "$containerd_shim_v2_name" 2>/dev/null)
src/runtime/data/kata-collect-data.sh.in:show_containerd_shimv2_log_details()
src/runtime/data/kata-collect-data.sh.in:	show_containerd_shimv2_log_details
src/runtime/data/kata-collect-data.sh.in:	if have_cmd "containerd" >/dev/null; then
src/runtime/data/kata-collect-data.sh.in:		title="containerd"
src/runtime/data/kata-collect-data.sh.in:		run_cmd_and_show_quoted_output "" "containerd --version"
src/runtime/data/kata-collect-data.sh.in:		local cmd="systemctl show containerd"
src/runtime/data/kata-collect-data.sh.in:		local file="/etc/containerd/config.toml"
src/runtime/data/kata-collect-data.sh.in:show_containerd_shimv2()
src/runtime/data/kata-collect-data.sh.in:	local cmd="${containerd_shim_v2_name} --version"
src/runtime/data/kata-collect-data.sh.in:	msg "Containerd shim v2 is \`$containerd_shim_v2\`."
src/runtime/data/kata-collect-data.sh.in:	show_containerd_shimv2
src/runtime/data/kata-collect-data.sh:typeset -r containerd_shim_v2_name="containerd-shim-kata-v2"
src/runtime/data/kata-collect-data.sh:typeset -r containerd_shim_v2=$(command -v "$containerd_shim_v2_name" 2>/dev/null)
src/runtime/data/kata-collect-data.sh:show_containerd_shimv2_log_details()
src/runtime/data/kata-collect-data.sh:	show_containerd_shimv2_log_details
src/runtime/data/kata-collect-data.sh:	if have_cmd "containerd" >/dev/null; then
src/runtime/data/kata-collect-data.sh:		title="containerd"
src/runtime/data/kata-collect-data.sh:		run_cmd_and_show_quoted_output "" "containerd --version"
src/runtime/data/kata-collect-data.sh:		local cmd="systemctl show containerd"
src/runtime/data/kata-collect-data.sh:		local file="/etc/containerd/config.toml"
src/runtime/data/kata-collect-data.sh:show_containerd_shimv2()
src/runtime/data/kata-collect-data.sh:	local cmd="${containerd_shim_v2_name} --version"
src/runtime/data/kata-collect-data.sh:	msg "Containerd shim v2 is \`$containerd_shim_v2\`."
src/runtime/data/kata-collect-data.sh:	show_containerd_shimv2
src/runtime/go.mod:	github.com/containerd/cgroups v0.0.0-20190717030353-c4b9ac5c7601
src/runtime/go.mod:	github.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e
src/runtime/go.mod:	github.com/containerd/containerd v1.2.1-0.20181210191522-f05672357f56
src/runtime/go.mod:	github.com/containerd/continuity v0.0.0-20200413184840-d3ef23f19fbb // indirect
src/runtime/go.mod:	github.com/containerd/cri v1.11.1 // indirect
src/runtime/go.mod:	github.com/containerd/cri-containerd v1.11.1-0.20190125013620-4dd6735020f5
src/runtime/go.mod:	github.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448
src/runtime/go.mod:	github.com/containerd/go-runc v0.0.0-20200220073739-7016d3ce2328 // indirect
src/runtime/go.mod:	github.com/containerd/ttrpc v1.0.0
src/runtime/go.mod:	github.com/containerd/typeurl v1.0.1-0.20190228175220-2a93cfde8c20
src/runtime/go.sum:github.com/containerd/cgroups v0.0.0-20190717030353-c4b9ac5c7601 h1:6xW3ogNpFIly0umJGEKzFfGDNUk5rXFE1lJ3/gBmz3U=
src/runtime/go.sum:github.com/containerd/cgroups v0.0.0-20190717030353-c4b9ac5c7601/go.mod h1:X9rLEHIqSf/wfK8NsPqxJmeZgW4pcfzdXITDrUSJ6uI=
src/runtime/go.sum:github.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e h1:GdiIYd8ZDOrT++e1NjhSD4rGt9zaJukHm4rt5F4mRQc=
src/runtime/go.sum:github.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e/go.mod h1:8Pf4gM6VEbTNRIT26AyyU7hxdQU3MvAvxVI0sc00XBE=
src/runtime/go.sum:github.com/containerd/containerd v1.2.1-0.20181210191522-f05672357f56 h1:KBZ3QBVr3gBySdyLzDs5Yom/oBH2hzhS03h6lxgkv7U=
src/runtime/go.sum:github.com/containerd/containerd v1.2.1-0.20181210191522-f05672357f56/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=
src/runtime/go.sum:github.com/containerd/continuity v0.0.0-20200413184840-d3ef23f19fbb h1:nXPkFq8X1a9ycY3GYQpFNxHh3j2JgY7zDZfq2EXMIzk=
src/runtime/go.sum:github.com/containerd/continuity v0.0.0-20200413184840-d3ef23f19fbb/go.mod h1:Dq467ZllaHgAtVp4p1xUQWBrFXR9s/wyoTpG8zOJGkY=
src/runtime/go.sum:github.com/containerd/cri v1.11.1 h1:mR8+eNW4zEcbWGTGEpmDd7GzMmK7IMxMSVAZ2aIDKA4=
src/runtime/go.sum:github.com/containerd/cri v1.11.1/go.mod h1:DavH5Qa8+6jOmeOMO3dhWoqksucZDe06LfuhBz/xPZs=
src/runtime/go.sum:github.com/containerd/cri-containerd v1.11.1-0.20190125013620-4dd6735020f5 h1:/srF029I+oDfm/qeltxCGJyJ8urmlqWGOQmQ7HvwrRc=
src/runtime/go.sum:github.com/containerd/cri-containerd v1.11.1-0.20190125013620-4dd6735020f5/go.mod h1:wxbGdReWGCalzGOEpifoHeYCK4xAgnj4o/4bVB+9voU=
src/runtime/go.sum:github.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448 h1:PUD50EuOMkXVcpBIA/R95d56duJR9VxhwncsFbNnxW4=
src/runtime/go.sum:github.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=
src/runtime/go.sum:github.com/containerd/go-runc v0.0.0-20200220073739-7016d3ce2328 h1:PRTagVMbJcCezLcHXe8UJvR1oBzp2lG3CEumeFOLOds=
src/runtime/go.sum:github.com/containerd/go-runc v0.0.0-20200220073739-7016d3ce2328/go.mod h1:PpyHrqVs8FTi9vpyHwPwiNEGaACDxT/N/pLcvMSRA9g=
src/runtime/go.sum:github.com/containerd/ttrpc v1.0.0 h1:NY8Zk2i7TpkLxrkOASo+KTFq9iNCEmMH2/ZG9OuOw6k=
src/runtime/go.sum:github.com/containerd/ttrpc v1.0.0/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=
src/runtime/go.sum:github.com/containerd/typeurl v1.0.1-0.20190228175220-2a93cfde8c20 h1:ZPfpTtR1qYoir10vhnnnQYGpnf1ZGiTGG+YGfPieydk=
src/runtime/go.sum:github.com/containerd/typeurl v1.0.1-0.20190228175220-2a93cfde8c20/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=
src/runtime/pkg/kata-monitor/containerd.go:	"github.com/containerd/containerd"
src/runtime/pkg/kata-monitor/containerd.go:	"github.com/containerd/containerd/containers"
src/runtime/pkg/kata-monitor/containerd.go:	"github.com/containerd/containerd/namespaces"
src/runtime/pkg/kata-monitor/containerd.go:	"github.com/containerd/typeurl"
src/runtime/pkg/kata-monitor/containerd.go:// getSandboxes get kata sandbox from containerd.
src/runtime/pkg/kata-monitor/containerd.go:	client, err := containerd.New(ka.containerdAddr)
src/runtime/pkg/kata-monitor/containerd.go:				"runtime.name~="+types.KataRuntimeNameRegexp+`,labels."io.cri-containerd.kind"==sandbox`)
src/runtime/pkg/kata-monitor/containerd_test.go:	criContainerdAnnotations "github.com/containerd/cri-containerd/pkg/annotations"
src/runtime/pkg/kata-monitor/containerd_test.go:	"github.com/containerd/typeurl"
src/runtime/pkg/kata-monitor/containerd_test.go:	"github.com/containerd/containerd/containers"
src/runtime/pkg/kata-monitor/metrics.go:	path := filepath.Join(km.containerdStatePath, types.ContainerdRuntimeTaskPath, namespace, sandboxID, "monitor_address")
src/runtime/pkg/kata-monitor/monitor.go:	"github.com/containerd/containerd/defaults"
src/runtime/pkg/kata-monitor/monitor.go:	srvconfig "github.com/containerd/containerd/services/server/config"
src/runtime/pkg/kata-monitor/monitor.go:	_ "github.com/containerd/containerd/api/events"
src/runtime/pkg/kata-monitor/monitor.go:	containerdAddr       string
src/runtime/pkg/kata-monitor/monitor.go:	containerdConfigFile string
src/runtime/pkg/kata-monitor/monitor.go:	containerdStatePath  string
src/runtime/pkg/kata-monitor/monitor.go:func NewKataMonitor(containerdAddr, containerdConfigFile string) (*KataMonitor, error) {
src/runtime/pkg/kata-monitor/monitor.go:	if containerdAddr == "" {
src/runtime/pkg/kata-monitor/monitor.go:	containerdConf := &srvconfig.Config{
src/runtime/pkg/kata-monitor/monitor.go:	if err := srvconfig.LoadConfig(containerdConfigFile, containerdConf); err != nil && !os.IsNotExist(err) {
src/runtime/pkg/kata-monitor/monitor.go:		containerdAddr:       containerdAddr,
src/runtime/pkg/kata-monitor/monitor.go:		containerdConfigFile: containerdConfigFile,
src/runtime/pkg/kata-monitor/monitor.go:		containerdStatePath:  containerdConf.State,
src/runtime/pkg/kata-monitor/monitor.go:	go km.sandboxCache.startEventsListener(km.containerdAddr)
src/runtime/pkg/kata-monitor/pprof_test.go:	statePath := filepath.Join(path, "io.containerd.runtime.v2.task")
src/runtime/pkg/kata-monitor/pprof_test.go:		containerdStatePath: path,
src/runtime/pkg/kata-monitor/sandbox_cache.go:	"github.com/containerd/containerd"
src/runtime/pkg/kata-monitor/sandbox_cache.go:	eventstypes "github.com/containerd/containerd/api/events"
src/runtime/pkg/kata-monitor/sandbox_cache.go:	"github.com/containerd/containerd/events"
src/runtime/pkg/kata-monitor/sandbox_cache.go:	"github.com/containerd/typeurl"
src/runtime/pkg/kata-monitor/sandbox_cache.go:	_ "github.com/containerd/containerd/api/events"
src/runtime/pkg/kata-monitor/sandbox_cache.go:	client, err := containerd.New(addr)
src/runtime/pkg/kata-monitor/sandbox_cache.go:				//          "runtime":{"name":"io.containerd.kata.v2"}
src/runtime/pkg/types/types.go:	DefaultKataRuntimeName    = "io.containerd.kata.v2"
src/runtime/pkg/types/types.go:	KataRuntimeNameRegexp     = `io\.containerd\.kata.*\.v2`
src/runtime/pkg/types/types.go:	ContainerdRuntimeTaskPath = "io.containerd.runtime.v2.task"
src/runtime/pkg/types/types_test.go:	assert.Equal(true, runtimeNameRegexp.MatchString("io.containerd.kata.v2"))
src/runtime/pkg/types/types_test.go:	assert.Equal(true, runtimeNameRegexp.MatchString("io.containerd.kataclh.v2"))
src/runtime/pkg/types/types_test.go:	assert.Equal(true, runtimeNameRegexp.MatchString("io.containerd.kata-clh.v2"))
src/runtime/pkg/types/types_test.go:	assert.Equal(true, runtimeNameRegexp.MatchString("io.containerd.kata.1.2.3-clh.4.v2"))
src/runtime/pkg/types/types_test.go:	assert.Equal(false, runtimeNameRegexp.MatchString("io2containerd.kata.v2"))
src/runtime/pkg/types/types_test.go:	assert.Equal(false, runtimeNameRegexp.MatchString("io.containerd.runc.v1"))
src/runtime/vendor/github.com/Microsoft/hcsshim/vendor.conf:github.com/containerd/console c12b1e7919c14469339a5d38f2f8ed9b64a9de23
src/runtime/vendor/github.com/Microsoft/hcsshim/vendor.conf:github.com/containerd/go-runc 5a6d9f37cfa36b15efba46dc7ea349fa9b7143c3
src/runtime/vendor/github.com/containerd/cgroups/.travis.yml:go_import_path: github.com/containerd/cgroups
src/runtime/vendor/github.com/containerd/cgroups/.travis.yml:    - cd $GOPATH/src/github.com/containerd/cgroups
src/runtime/vendor/github.com/containerd/cgroups/.travis.yml:    - pushd ..; git clone https://github.com/containerd/project; popd
src/runtime/vendor/github.com/containerd/cgroups/Makefile:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/Protobuild.toml:prefix = "github.com/containerd/cgroups"
src/runtime/vendor/github.com/containerd/cgroups/README.md:[![Build Status](https://travis-ci.org/containerd/cgroups.svg?branch=master)](https://travis-ci.org/containerd/cgroups)
src/runtime/vendor/github.com/containerd/cgroups/README.md:[![codecov](https://codecov.io/gh/containerd/cgroups/branch/master/graph/badge.svg)](https://codecov.io/gh/containerd/cgroups)
src/runtime/vendor/github.com/containerd/cgroups/README.md:[![GoDoc](https://godoc.org/github.com/containerd/cgroups?status.svg)](https://godoc.org/github.com/containerd/cgroups)
src/runtime/vendor/github.com/containerd/cgroups/README.md:[![Go Report Card](https://goreportcard.com/badge/github.com/containerd/cgroups)](https://goreportcard.com/report/github.com/containerd/cgroups)
src/runtime/vendor/github.com/containerd/cgroups/README.md:Cgroups is a containerd sub-project, licensed under the [Apache 2.0 license](./LICENSE).
src/runtime/vendor/github.com/containerd/cgroups/README.md:As a containerd sub-project, you will find the:
src/runtime/vendor/github.com/containerd/cgroups/README.md: * [Project governance](https://github.com/containerd/project/blob/master/GOVERNANCE.md),
src/runtime/vendor/github.com/containerd/cgroups/README.md: * [Maintainers](https://github.com/containerd/project/blob/master/MAINTAINERS),
src/runtime/vendor/github.com/containerd/cgroups/README.md: * and [Contributing guidelines](https://github.com/containerd/project/blob/master/CONTRIBUTING.md)
src/runtime/vendor/github.com/containerd/cgroups/README.md:information in our [`containerd/project`](https://github.com/containerd/project) repository.
src/runtime/vendor/github.com/containerd/cgroups/blkio.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/cgroup.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/control.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/cpu.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/cpuacct.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/cpuset.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/devices.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/errors.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/freezer.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/hierarchy.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/hugetlb.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/memory.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:// source: github.com/containerd/cgroups/metrics.proto
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:		github.com/containerd/cgroups/metrics.proto
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*Metrics)(nil), "io.containerd.cgroups.v1.Metrics")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*HugetlbStat)(nil), "io.containerd.cgroups.v1.HugetlbStat")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*PidsStat)(nil), "io.containerd.cgroups.v1.PidsStat")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*CPUStat)(nil), "io.containerd.cgroups.v1.CPUStat")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*CPUUsage)(nil), "io.containerd.cgroups.v1.CPUUsage")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*Throttle)(nil), "io.containerd.cgroups.v1.Throttle")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*MemoryStat)(nil), "io.containerd.cgroups.v1.MemoryStat")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*MemoryEntry)(nil), "io.containerd.cgroups.v1.MemoryEntry")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*BlkIOStat)(nil), "io.containerd.cgroups.v1.BlkIOStat")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*BlkIOEntry)(nil), "io.containerd.cgroups.v1.BlkIOEntry")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*RdmaStat)(nil), "io.containerd.cgroups.v1.RdmaStat")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*RdmaEntry)(nil), "io.containerd.cgroups.v1.RdmaEntry")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:	proto.RegisterType((*NetworkStat)(nil), "io.containerd.cgroups.v1.NetworkStat")
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.go:func init() { proto.RegisterFile("github.com/containerd/cgroups/metrics.proto", fileDescriptorMetrics) }
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:  name: "github.com/containerd/cgroups/metrics.proto"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:  package: "io.containerd.cgroups.v1"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.HugetlbStat"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.PidsStat"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.CPUStat"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.MemoryStat"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOStat"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.RdmaStat"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.NetworkStat"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.CPUUsage"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.Throttle"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.MemoryEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.MemoryEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.MemoryEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.MemoryEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.BlkIOEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.RdmaEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.pb.txt:      type_name: ".io.containerd.cgroups.v1.RdmaEntry"
src/runtime/vendor/github.com/containerd/cgroups/metrics.proto:package io.containerd.cgroups.v1;
src/runtime/vendor/github.com/containerd/cgroups/named.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/net_cls.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/net_prio.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/paths.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/perf_event.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/pids.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/rdma.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/state.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/subsystem.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/systemd.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/ticks.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/ticks.go:	// See https://github.com/containerd/cgroups/pull/12 for
src/runtime/vendor/github.com/containerd/cgroups/utils.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cgroups/v1.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/.travis.yml:go_import_path: github.com/containerd/console
src/runtime/vendor/github.com/containerd/console/.travis.yml:  - pushd ..; git clone https://github.com/containerd/project; popd
src/runtime/vendor/github.com/containerd/console/LICENSE:   Copyright The containerd Authors
src/runtime/vendor/github.com/containerd/console/README.md:[![Build Status](https://travis-ci.org/containerd/console.svg?branch=master)](https://travis-ci.org/containerd/console)
src/runtime/vendor/github.com/containerd/console/README.md:console is a containerd sub-project, licensed under the [Apache 2.0 license](./LICENSE).
src/runtime/vendor/github.com/containerd/console/README.md:As a containerd sub-project, you will find the:
src/runtime/vendor/github.com/containerd/console/README.md: * [Project governance](https://github.com/containerd/project/blob/master/GOVERNANCE.md),
src/runtime/vendor/github.com/containerd/console/README.md: * [Maintainers](https://github.com/containerd/project/blob/master/MAINTAINERS),
src/runtime/vendor/github.com/containerd/console/README.md: * and [Contributing guidelines](https://github.com/containerd/project/blob/master/CONTRIBUTING.md)
src/runtime/vendor/github.com/containerd/console/README.md:information in our [`containerd/project`](https://github.com/containerd/project) repository.
src/runtime/vendor/github.com/containerd/console/console.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/console_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/console_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/console_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/go.mod:module github.com/containerd/console
src/runtime/vendor/github.com/containerd/console/tc_darwin.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/tc_freebsd.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/tc_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/tc_openbsd_cgo.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/tc_openbsd_nocgo.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/tc_solaris_cgo.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/tc_solaris_nocgo.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/console/tc_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/.appveyor.yml:clone_folder: c:\gopath\src\github.com\containerd\containerd
src/runtime/vendor/github.com/containerd/containerd/.appveyor.yml:  # Print host version. TODO: Remove this when containerd has a way to get host version
src/runtime/vendor/github.com/containerd/containerd/.appveyor.yml:  - bash.exe -lc "export PATH=/c/tools/mingw64/bin:/c/gopath/src/github.com/containerd/containerd/bin:$PATH ; mingw32-make.exe coverage root-coverage"
src/runtime/vendor/github.com/containerd/containerd/.appveyor.yml:  - bash.exe -elc "export PATH=/c/tools/mingw64/bin:/c/gopath/src/github.com/containerd/containerd/bin:$PATH ; mingw32-make.exe integration"
src/runtime/vendor/github.com/containerd/containerd/.appveyor.yml:  # Run the integration suite a second time. See discussion in github.com/containerd/containerd/pull/1759
src/runtime/vendor/github.com/containerd/containerd/.appveyor.yml:  - bash.exe -elc "export PATH=/c/tools/mingw64/bin:/c/gopath/src/github.com/containerd/containerd/bin:$PATH; TESTFLAGS_PARALLEL=1 mingw32-make.exe integration"
src/runtime/vendor/github.com/containerd/containerd/.gitignore:containerd.test
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:go_import_path: github.com/containerd/containerd
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:  - TRAVIS_GOOS=linux TEST_RUNTIME=io.containerd.runc.v1 TRAVIS_CGO_ENABLED=1
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:  - TRAVIS_GOOS=linux TEST_RUNTIME=io.containerd.runtime.v1.linux TRAVIS_CGO_ENABLED=1
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:  - pushd ..; git clone https://github.com/containerd/project; popd
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:  # Run the integration suite a second time. See discussion in github.com/containerd/containerd/pull/1759
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:      sudo PATH=$PATH containerd -log-level debug &> /tmp/containerd-cri.log &
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:      sudo PATH=$PATH GOPATH=$GOPATH critest --runtime-endpoint=/var/run/containerd/containerd.sock --parallel=8 ;
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:      test $TEST_RC -ne 0 && cat /tmp/containerd-cri.log ;
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:      sudo pkill containerd ;
src/runtime/vendor/github.com/containerd/containerd/.travis.yml:    repo: containerd/containerd
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:## containerd Adopters
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:A non-exhaustive list of containerd adopters is provided below.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:runtime manager for `runc` processes below the Docker engine. Continuing today, containerd
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_[IBM Cloud Kubernetes Service (IKS)](https://www.ibm.com/cloud/container-service)_** - offers containerd as the CRI runtime for v1.11 and higher versions.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_[IBM Cloud Private (ICP)](https://www.ibm.com/cloud/private)_** - IBM's on-premises cloud offering has containerd as a "tech preview" CRI runtime for the Kubernetes offered within this product for the past two releases, and plans to fully migrate to containerd in a future release.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_[Google Cloud Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine/)_** - offers containerd as the CRI runtime in **beta** for recent versions of Kubernetes.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Cloud Foundry_** - The [Guardian container manager](https://github.com/cloudfoundry/guardian) for CF has been using OCI runC directly with additional code from CF managing the container image and filesystem interactions, but have recently migrated to use containerd as a replacement for the extra code they had written around runC.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Alibaba's PouchContainer_** - The Alibaba [PouchContainer](https://github.com/alibaba/pouch) project uses containerd as its runtime for a cloud native offering that has unique isolation and image distribution capabilities.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Rancher's Rio project_** - Rancher Labs [Rio](https://github.com/rancher/rio) project uses containerd as the runtime for a combined Kubernetes, Istio, and container "Cloud Native Container Distribution" platform.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Eliot_** - The [Eliot](https://github.com/ernoaapa/eliot) container project for IoT device container management uses containerd as the runtime.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Balena_** - Resin's [Balena](https://github.com/resin-os/balena) container engine, based on moby/moby but for edge, embedded, and IoT use cases, uses the containerd and runc stack in the same way that the Docker engine uses containerd.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_LinuxKit_** - the Moby project's [LinuxKit](https://github.com/linuxkit/linuxkit) for building secure, minimal Linux OS images in a container-native model uses containerd as the core runtime for system and service containers.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_BuildKit_** - The Moby project's [BuildKit](https://github.com/moby/buildkit) can use either runC or containerd as build execution backends for building container images. BuildKit support has also been built into the Docker engine in recent releases, making BuildKit provide the backend to the `docker build` command.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Azure acs-engine_** - Microsoft Azure's [acs-engine](https://github.com/Azure/acs-engine) open source project has customizable deployment of Kubernetes clusters, where containerd is a selectable container runtime. At some point in the future Azure's AKS service will default to use containerd as the CRI runtime for deployed Kubernetes clusters.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Amazon Firecracker_** - The AWS [Firecracker VMM project](http://firecracker-microvm.io/) has extended containerd with a new snapshotter and v2 shim to allow containerd to drive virtualized container processes via their VMM implementation. More details on their containerd integration are available in [their GitHub project](https://github.com/firecracker-microvm/firecracker-containerd).
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Kata Containers_** - The [Kata containers](https://katacontainers.io/) lightweight-virtualized container runtime project integrates with containerd via a custom v2 shim implementation that drives the Kata container runtime.
src/runtime/vendor/github.com/containerd/containerd/ADOPTERS.md:**_Other Projects_** - While the above list provides a cross-section of well known uses of containerd, the simplicity and clear API layer for containerd has inspired many smaller projects around providing simple container management platforms. Several examples of building higher layer functionality on top of the containerd base have come from various containerd community participants:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:# Build containerd from source
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:This guide is useful if you intend to contribute on containerd. Thanks for your
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:* [Build containerd](#build-containerd)
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:* [Testing](#testing-containerd)
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:To build the `containerd` daemon, and the `ctr` simple test client, the following build system dependencies are required:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:At this point you can use `go` to checkout `containerd` in your `GOPATH`:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:go get github.com/containerd/containerd
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:`containerd` uses [Btrfs](https://en.wikipedia.org/wiki/Btrfs) it means that you
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:At this point you are ready to build `containerd` yourself!
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:`runc` is the default container runtime used by `containerd` and is required to
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:run containerd. While it is okay to download a runc binary and install that on
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:## Build containerd
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:`containerd` uses `make` to create a repeatable build flow. It means that you
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:> * `no_cri`: A build tag disables building Kubernetes [CRI](http://blog.kubernetes.io/2016/12/container-runtime-interface-cri-in-kubernetes.html) support into containerd.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:> See [here](https://github.com/containerd/cri-containerd#build-tags) for build tags of CRI plugin.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:> Makefile target will disable the btrfs driver within the containerd Go build.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:Please refer to [RUNC.md](/RUNC.md) for the currently supported version of `runc` that is used by containerd.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:> - static containerd binary does not support loading plugins
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:## Build containerd
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:You can build `containerd` via a Linux-based Docker container.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:Let's suppose that you built an image called `containerd/build`. From the
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:containerd source root directory you can run the following command:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:    -v ${PWD}:/go/src/github.com/containerd/containerd \
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:    -w /go/src/github.com/containerd/containerd containerd/build sh
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:This mounts `containerd` repository
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:You are now ready to [build](#build-containerd):
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:## Build containerd and runc
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:To have complete core container runtime, you will both `containerd` and `runc`. It is possible to build both of these via Docker container.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:In our Docker container we will use a specific `runc` build which includes [seccomp](https://en.wikipedia.org/wiki/seccomp) and [apparmor](https://en.wikipedia.org/wiki/AppArmor) support. Hence why our Dockerfile includes `libseccomp-dev` as a dependency (apparmor support doesn't require external libraries). Please refer to [RUNC.md](/RUNC.md) for the currently supported version of `runc` that is used by containerd.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:Let's suppose you build an image called `containerd/build` from the above Dockerfile. You can run the following command:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:    -v /var/lib/containerd \
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:    -v ${GOPATH}/src/github.com/containerd/containerd:/go/src/github.com/containerd/containerd \
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:    -w /go/src/github.com/containerd/containerd containerd/build sh
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:This mounts both `runc` and `containerd` repositories in our Docker container.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:From within our Docker container let's build `containerd`:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:cd /go/src/github.com/containerd/containerd
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:containerd --config config.toml
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:# Testing containerd
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:INFO[0000] running tests against containerd revision=f2ae8a020a985a8d9862c9eb5ab66902c2888361 version=v1.0.0-beta.2-49-gf2ae8a0
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:ok  	github.com/containerd/containerd	4.778s
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:### containerd-stress
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:In addition to `go test`-based testing executed via the `Makefile` targets, the `containerd-stress` tool is available and built with the `all` or `binaries` targets and installed during `make install`.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:With this tool you can stress a running containerd daemon for a specified period of time, selecting a concurrency level to generate stress against the daemon. The following command is an example of having five workers running for two hours against a default containerd gRPC socket address:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:containerd-stress -c 5 -t 120
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:For more information on this tool's options please run `containerd-stress --help`.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:[Bucketbench](https://github.com/estesp/bucketbench) is an external tool which can be used to drive load against a container runtime, specifying a particular set of lifecycle operations to run with a specified amount of concurrency. Bucketbench is more focused on generating performance details than simply inducing load against containerd.
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md:Bucketbench differs from the `containerd-stress` tool in a few ways:
src/runtime/vendor/github.com/containerd/containerd/BUILDING.md: - Bucketbench has support for testing the Docker engine, the `runc` binary, and containerd 0.2.x (via `ctr`) and 1.0 (via the client library) branches.
src/runtime/vendor/github.com/containerd/containerd/LICENSE:   Copyright The containerd Authors
src/runtime/vendor/github.com/containerd/containerd/Makefile:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/Makefile:RELEASE=containerd-$(VERSION:v%=%).${GOOS}-${GOARCH}
src/runtime/vendor/github.com/containerd/containerd/Makefile:PKG=github.com/containerd/containerd
src/runtime/vendor/github.com/containerd/containerd/Makefile:COMMANDS=ctr containerd containerd-stress
src/runtime/vendor/github.com/containerd/containerd/Makefile:MANPAGES=ctr.1 containerd.1 containerd-config.1 containerd-config.toml.5
src/runtime/vendor/github.com/containerd/containerd/Makefile:bin/containerd-shim: cmd/containerd-shim FORCE # set !cgo and omit pie for a static shim build: https://github.com/golang/go/issues/17789#issuecomment-258542220
src/runtime/vendor/github.com/containerd/containerd/Makefile:	@echo "$(WHALE) bin/containerd-shim"
src/runtime/vendor/github.com/containerd/containerd/Makefile:	@CGO_ENABLED=0 go build ${GO_BUILD_FLAGS} -o bin/containerd-shim ${SHIM_GO_LDFLAGS} ${GO_TAGS} ./cmd/containerd-shim
src/runtime/vendor/github.com/containerd/containerd/Makefile:bin/containerd-shim-runc-v1: cmd/containerd-shim-runc-v1 FORCE # set !cgo and omit pie for a static shim build: https://github.com/golang/go/issues/17789#issuecomment-258542220
src/runtime/vendor/github.com/containerd/containerd/Makefile:	@echo "$(WHALE) bin/containerd-shim-runc-v1"
src/runtime/vendor/github.com/containerd/containerd/Makefile:	@CGO_ENABLED=0 go build ${GO_BUILD_FLAGS} -o bin/containerd-shim-runc-v1 ${SHIM_GO_LDFLAGS} ${GO_TAGS} ./cmd/containerd-shim-runc-v1
src/runtime/vendor/github.com/containerd/containerd/Makefile:bin/containerd-shim-runhcs-v1: cmd/containerd-shim-runhcs-v1 FORCE # set !cgo and omit pie for a static shim build: https://github.com/golang/go/issues/17789#issuecomment-258542220
src/runtime/vendor/github.com/containerd/containerd/Makefile:	@echo "$(WHALE) bin/containerd-shim-runhcs-v1${BINARY_SUFFIX}"
src/runtime/vendor/github.com/containerd/containerd/Makefile:	@CGO_ENABLED=0 go build ${GO_BUILD_FLAGS} -o bin/containerd-shim-runhcs-v1${BINARY_SUFFIX} ${SHIM_GO_LDFLAGS} ${GO_TAGS} ./cmd/containerd-shim-runhcs-v1
src/runtime/vendor/github.com/containerd/containerd/Makefile.darwin:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/Makefile.darwin:COMMANDS += containerd-shim
src/runtime/vendor/github.com/containerd/containerd/Makefile.freebsd:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/Makefile.freebsd:COMMANDS += containerd-shim
src/runtime/vendor/github.com/containerd/containerd/Makefile.linux:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/Makefile.linux:COMMANDS += containerd-shim containerd-shim-runc-v1
src/runtime/vendor/github.com/containerd/containerd/Makefile.windows:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/Makefile.windows:COMMANDS += containerd-shim-runhcs-v1
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:# containerd Plugins
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:containerd supports extending its functionality using most of its defined
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:containerd has a smart client architecture, meaning any functionality which is
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:with an image registry, or loading an image from tar. containerd's Go client
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:See [containerd's Go documentation](https://godoc.org/github.com/containerd/containerd)
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:External plugins allow extending containerd's functionality using an officially
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:released version of containerd without needing to recompile the daemon to add a
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:containerd allows extensions through two method:
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md: - via a binary available in containerd's PATH
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md: - by configuring containerd to proxy to another gRPC service
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:These binaries are used to start the shim process for containerd and allows
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:containerd to manage those containers using the runtime shim api returned by
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:A proxy plugin is configured using containerd's config file and will be loaded
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:alongside the internal plugins when containerd is started. These plugins are
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:connected to containerd using a local socket serving one of containerd's gRPC
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:Update the containerd config file, which by default is at
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:`/etc/containerd/config.toml`. Add a `[proxy_plugins]` section along with a
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:refer to a local socket file which the containerd process has access to. The
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:[content store service](https://godoc.org/github.com/containerd/containerd/api/services/content/v1#ContentServer)
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:and [snapshotter service](https://godoc.org/github.com/containerd/containerd/api/services/snapshots/v1#SnapshotsServer).
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:[containerd's Snapshotter interface](https://godoc.org/github.com/containerd/containerd/snapshots#Snapshotter)
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:	snapshotsapi "github.com/containerd/containerd/api/services/snapshots/v1"
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:	"github.com/containerd/containerd/contrib/snapshotservice"
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:	"github.com/containerd/containerd/snapshots/native"
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:	// https://godoc.org/github.com/containerd/containerd/snapshots#Snapshotter
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:	// example in github.com/containerd/containerd/contrib/snapshotservice
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:containerd uses plugins internally to ensure that internal implementations are
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:plugins containerd has, use `ctr plugins ls`
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.content.v1        content               -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.snapshotter.v1    btrfs                 linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.snapshotter.v1    aufs                  linux/amd64    error
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.snapshotter.v1    native                linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.snapshotter.v1    overlayfs             linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.snapshotter.v1    zfs                   linux/amd64    error
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.metadata.v1       bolt                  -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.differ.v1         walking               linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.gc.v1             scheduler             -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        containers-service    -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        content-service       -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        diff-service          -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        images-service        -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        leases-service        -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        namespaces-service    -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        snapshots-service     -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.runtime.v1        linux                 linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.runtime.v2        task                  linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.monitor.v1        cgroups               linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.service.v1        tasks-service         -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.internal.v1       restart               -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           containers            -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           content               -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           diff                  -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           events                -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           healthcheck           -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           images                -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           leases                -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           namespaces            -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           snapshots             -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           tasks                 -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           version               -              ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:io.containerd.grpc.v1           cri                   linux/amd64    ok
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:Type:          io.containerd.snapshotter.v1
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:               root      /var/lib/containerd/io.containerd.snapshotter.v1.aufs
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:Type:          io.containerd.snapshotter.v1
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:               root      /var/lib/containerd/io.containerd.snapshotter.v1.zfs
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:               Message:     path /var/lib/containerd/io.containerd.snapshotter.v1.zfs must be a zfs filesystem to be used with the zfs snapshotter
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:Plugins are configured using the `[plugins]` section of containerd's config.
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:    [plugins.cri.containerd]
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:      [plugins.cri.containerd.default_runtime]
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:        runtime_type = "io.containerd.runtime.v1.linux"
src/runtime/vendor/github.com/containerd/containerd/PLUGINS.md:      [plugins.cri.containerd.untrusted_workload_runtime]
src/runtime/vendor/github.com/containerd/containerd/Protobuild.toml:prefixes = ["github.com/containerd/containerd/api/events"]
src/runtime/vendor/github.com/containerd/containerd/Protobuild.toml:prefixes = ["github.com/containerd/containerd/runtime/v1/shim/v1", "github.com/containerd/containerd/runtime/v2/task"]
src/runtime/vendor/github.com/containerd/containerd/Protobuild.toml:prefix = "github.com/containerd/containerd/api"
src/runtime/vendor/github.com/containerd/containerd/Protobuild.toml:prefix = "github.com/containerd/containerd/runtime/linux/runctypes"
src/runtime/vendor/github.com/containerd/containerd/Protobuild.toml:prefix = "github.com/containerd/containerd/runtime/v2/runc/options"
src/runtime/vendor/github.com/containerd/containerd/Protobuild.toml:prefix = "github.com/containerd/containerd/runtime/v2/runhcs/options"
src/runtime/vendor/github.com/containerd/containerd/Protobuild.toml:prefix = "github.com/containerd/containerd/windows/hcsshimtypes"
src/runtime/vendor/github.com/containerd/containerd/README.md:![containerd banner](https://raw.githubusercontent.com/cncf/artwork/master/containerd/horizontal/color/containerd-horizontal-color.png)
src/runtime/vendor/github.com/containerd/containerd/README.md:[![GoDoc](https://godoc.org/github.com/containerd/containerd?status.svg)](https://godoc.org/github.com/containerd/containerd)
src/runtime/vendor/github.com/containerd/containerd/README.md:[![Build Status](https://travis-ci.org/containerd/containerd.svg?branch=master)](https://travis-ci.org/containerd/containerd)
src/runtime/vendor/github.com/containerd/containerd/README.md:[![Windows Build Status](https://ci.appveyor.com/api/projects/status/github/containerd/containerd?branch=master&svg=true)](https://ci.appveyor.com/project/mlaventure/containerd-3g73f?branch=master)
src/runtime/vendor/github.com/containerd/containerd/README.md:[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fcontainerd%2Fcontainerd.svg?type=shield)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fcontainerd%2Fcontainerd?ref=badge_shield)
src/runtime/vendor/github.com/containerd/containerd/README.md:[![Go Report Card](https://goreportcard.com/badge/github.com/containerd/containerd)](https://goreportcard.com/report/github.com/containerd/containerd)
src/runtime/vendor/github.com/containerd/containerd/README.md:containerd is an industry-standard container runtime with an emphasis on simplicity, robustness and portability. It is available as a daemon for Linux and Windows, which can manage the complete container lifecycle of its host system: image transfer and storage, container execution and supervision, low-level storage and network attachments, etc.
src/runtime/vendor/github.com/containerd/containerd/README.md:containerd is designed to be embedded into a larger system, rather than being used directly by developers or end-users.
src/runtime/vendor/github.com/containerd/containerd/README.md:See our documentation on [containerd.io](https://containerd.io):
src/runtime/vendor/github.com/containerd/containerd/README.md:See how to build containerd from source at [BUILDING](BUILDING.md).
src/runtime/vendor/github.com/containerd/containerd/README.md:If you are interested in trying out containerd see our example at [Getting Started](docs/getting-started.md).
src/runtime/vendor/github.com/containerd/containerd/README.md:Runtime requirements for containerd are very minimal. Most interactions with
src/runtime/vendor/github.com/containerd/containerd/README.md:used by containerd core code and snapshotters that will require a minimum kernel
src/runtime/vendor/github.com/containerd/containerd/README.md:containerd offers a full client package to help you integrate containerd into your platform.
src/runtime/vendor/github.com/containerd/containerd/README.md:  "github.com/containerd/containerd"
src/runtime/vendor/github.com/containerd/containerd/README.md:  "github.com/containerd/containerd/cio"
src/runtime/vendor/github.com/containerd/containerd/README.md:	client, err := containerd.New("/run/containerd/containerd.sock")
src/runtime/vendor/github.com/containerd/containerd/README.md:Namespaces allow multiple consumers to use the same containerd without conflicting with each other.  It has the benefit of sharing content but still having separation with containers and images.
src/runtime/vendor/github.com/containerd/containerd/README.md:containerd, err := client.NewContainer(docker, "id")
src/runtime/vendor/github.com/containerd/containerd/README.md:client, err := containerd.New(address, containerd.WithDefaultNamespace("docker"))
src/runtime/vendor/github.com/containerd/containerd/README.md:In containerd, a container is a metadata object.  Resources such as an OCI runtime specification, image, root filesystem, and other metadata can be attached to a container.
src/runtime/vendor/github.com/containerd/containerd/README.md:containerd fully supports the OCI runtime specification for running containers.  We have built in functions to help you generate runtime specifications based on images as well as custom parameters.
src/runtime/vendor/github.com/containerd/containerd/README.md:redis, err := client.NewContainer(context, "redis-master", containerd.WithNewSpec(oci.WithImageConfig(image)))
src/runtime/vendor/github.com/containerd/containerd/README.md:containerd allows you to use overlay or snapshot filesystems with your containers.  It comes with builtin support for overlayfs and btrfs.
src/runtime/vendor/github.com/containerd/containerd/README.md:image, err := client.Pull(context, "docker.io/library/redis:latest", containerd.WithPullUnpack)
src/runtime/vendor/github.com/containerd/containerd/README.md:	containerd.WithNewSnapshot("redis-rootfs", image),
src/runtime/vendor/github.com/containerd/containerd/README.md:	containerd.WithNewSpec(oci.WithImageConfig(image)),
src/runtime/vendor/github.com/containerd/containerd/README.md:		containerd.WithNewSnapshotView(id, image),
src/runtime/vendor/github.com/containerd/containerd/README.md:		containerd.WithNewSpec(oci.WithImageConfig(image)),
src/runtime/vendor/github.com/containerd/containerd/README.md:Taking a container object and turning it into a runnable process on a system is done by creating a new `Task` from the container.  A task represents the runnable object within containerd.
src/runtime/vendor/github.com/containerd/containerd/README.md:// or other runtime settings outside of containerd
src/runtime/vendor/github.com/containerd/containerd/README.md:redis, err = client.NewContainer(context, "redis-master", containerd.WithCheckpoint(checkpoint, "redis-rootfs"))
src/runtime/vendor/github.com/containerd/containerd/README.md:task, err = redis.NewTask(context, cio.Stdio, containerd.WithTaskCheckpoint(checkpoint))
src/runtime/vendor/github.com/containerd/containerd/README.md:In addition to the built-in Snapshot plugins in containerd, additional external
src/runtime/vendor/github.com/containerd/containerd/README.md:To add an external snapshot plugin, add the plugin to containerd's config file
src/runtime/vendor/github.com/containerd/containerd/README.md:(by default at `/etc/containerd/config.toml`). The string following
src/runtime/vendor/github.com/containerd/containerd/README.md:should refer to a socket with a GRPC listener serving containerd's Snapshot
src/runtime/vendor/github.com/containerd/containerd/README.md:GRPC API. Remember to restart containerd for any configuration changes to take
src/runtime/vendor/github.com/containerd/containerd/README.md:of containerd components.
src/runtime/vendor/github.com/containerd/containerd/README.md:https://github.com/containerd/containerd/tree/master/reports
src/runtime/vendor/github.com/containerd/containerd/README.md:For sync communication we have a community slack with a #containerd channel that everyone is welcome to join and chat about development.
src/runtime/vendor/github.com/containerd/containerd/README.md:**Slack:** Catch us in the #containerd and #containerd-dev channels on dockercommunity.slack.com.
src/runtime/vendor/github.com/containerd/containerd/README.md:__If you are reporting a security issue, please reach out discreetly at security@containerd.io__.
src/runtime/vendor/github.com/containerd/containerd/README.md:The containerd codebase is released under the [Apache 2.0 license](LICENSE.code).
src/runtime/vendor/github.com/containerd/containerd/README.md:**containerd** is the primary open source project within the broader containerd GitHub repository.
src/runtime/vendor/github.com/containerd/containerd/README.md:guidelines which are stored in a `project` repository commonly for all containerd projects.
src/runtime/vendor/github.com/containerd/containerd/README.md: * [Project governance](https://github.com/containerd/project/blob/master/GOVERNANCE.md),
src/runtime/vendor/github.com/containerd/containerd/README.md: * [Maintainers](https://github.com/containerd/project/blob/master/MAINTAINERS),
src/runtime/vendor/github.com/containerd/containerd/README.md: * and [Contributing guidelines](https://github.com/containerd/project/blob/master/CONTRIBUTING.md)
src/runtime/vendor/github.com/containerd/containerd/README.md:information in our [`containerd/project`](https://github.com/containerd/project) repository.
src/runtime/vendor/github.com/containerd/containerd/README.md:Interested to see who is using containerd? Are you using containerd in a project?
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:This document details the versioning and release plan for containerd. Stability
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:If you rely on containerd, it would be good to spend time understanding the
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:reach out by [filing an issue](https://github.com/containerd/containerd/issues).
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:Releases of containerd will be versioned using dotted triples, similar to
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:Major and minor releases of containerd will be made from master. Releases of
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:containerd will be marked with GPG signed tags and announced at
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:https://github.com/containerd/containerd/releases. The tag will be of the
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:The upgrade path for containerd is such that the 0.0.x patch releases are
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:[milestones](https://github.com/containerd/containerd/milestones). If your
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| [0.0](https://github.com/containerd/containerd/releases/tag/0.0.5)  | End of Life | Dec 4, 2015  | - |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| [0.1](https://github.com/containerd/containerd/releases/tag/v0.1.0) | End of Life | Mar 21, 2016 | - |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| [0.2](https://github.com/containerd/containerd/tree/v0.2.x)         | End of Life | Apr 21, 2016      | December 5, 2017 |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| [1.0](https://github.com/containerd/containerd/releases/tag/v1.0.0) | Active   | December 5, 2017  | December 5, 2018 |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| [1.1](https://github.com/containerd/containerd/releases/tag/v1.1.0) | Active   | April 23, 2018  | max(April 23, 2019, release of 1.2.0, Kubernetes 1.10 EOL) |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| [1.2](https://github.com/containerd/containerd/releases/tag/v1.2.0) | Active   | October 24, 2018 | max(October 24, 2019, release of 1.3.0) |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| [1.3](https://github.com/containerd/containerd/milestone/20)        | Next   | TBD  | max(TBD+1 year, release of 1.4.0) |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:Backports in containerd are community driven. As maintainers, we'll try to
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:__If you are reporting a security issue, please reach out discreetly at security@containerd.io__.
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:containerd versions:
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:| Go client API    | Unstable | _future_           | [godoc](https://godoc.org/github.com/containerd/containerd) |
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:The primary product of containerd is the GRPC API. As of the 1.0.0 release, the
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:a single file. At each _minor_ release of containerd, we will move the current
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:containerd is based on a modular design where plugins are implemented to provide the core functionality.
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:Plugins implemented in tree are supported by the containerd community unless explicitly specified as non-stable.
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:Out of tree plugins are not supported by the containerd maintainers.
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:[godoc](https://godoc.org/github.com/containerd/containerd), is currently
src/runtime/vendor/github.com/containerd/containerd/RELEASES.md:The `ctr` tool provides the ability to introspect and understand the containerd
src/runtime/vendor/github.com/containerd/containerd/ROADMAP.md:# containerd roadmap
src/runtime/vendor/github.com/containerd/containerd/ROADMAP.md:containerd uses the issues and milestones to define its roadmap.
src/runtime/vendor/github.com/containerd/containerd/ROADMAP.md:They are tasks and/or features that the containerd community wants completed.
src/runtime/vendor/github.com/containerd/containerd/ROADMAP.md:To find the roadmap items currently planned for containerd you can filter on the `roadmap` label.
src/runtime/vendor/github.com/containerd/containerd/ROADMAP.md:[Search Roadmap Items](https://github.com/containerd/containerd/issues?q=is%3Aopen+is%3Aissue+label%3Aroadmap)
src/runtime/vendor/github.com/containerd/containerd/ROADMAP.md:[View Milestones](https://github.com/containerd/containerd/milestones)
src/runtime/vendor/github.com/containerd/containerd/RUNC.md:containerd is built with OCI support and with support for advanced features provided by [runc](https://github.com/opencontainers/runc).
src/runtime/vendor/github.com/containerd/containerd/RUNC.md:After an official runc release we will start pinning containerd support to a specific version but various development and testing features may require a newer runc version than the latest release.  If you encounter any runtime errors, please make sure your runc is in sync with the commit/tag provided in this document.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:containerd should expose primitives to solve problems instead of building high level abstractions in the API.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:Instead of having a build API in containerd we should expose the lower level primitives that allow things required in build to work.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:For the various components in containerd there should be defined extension points where implementations can be swapped for alternatives.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:The best example of this is that containerd will use `runc` from OCI as the default runtime in the execution layer but other runtimes conforming to the OCI Runtime specification can be easily added to containerd.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:containerd will come with a default implementation for the various components.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:Additional implementations will not be accepted into the core repository and should be developed in a separate repository not maintained by the containerd maintainers.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:The following table specifies the various components of containerd and general features of container runtimes.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:| distribution | Having the ability to push and pull images as well as operations on images as a first class API object | in | containerd will fully support the management and retrieval of images |
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:| networking | creation and management of network interfaces | out | Networking will be handled and provided to containerd via higher level systems. |
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:| build | Building images as a first class API | out | Build is a higher level tooling feature and can be implemented in many different ways on top of containerd |
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:| volumes | Volume management for external data | out | The API supports mounts, binds, etc where all volumes type systems can be built on top of containerd. |
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:| logging | Persisting container logs | out | Logging can be build on top of containerd because the container’s STDIO will be provided to the clients and they can persist any way they see fit. There is no io copying of container STDIO in containerd. |
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:containerd is scoped to a single host and makes assumptions based on that fact.
src/runtime/vendor/github.com/containerd/containerd/SCOPE.md:containerd is designed to be embedded into a larger system, hence it only includes a barebone CLI (`ctr`) specifically for development and debugging purpose, with no mandate to be human-friendly, and no guarantee of interface stability over time.
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:// source: github.com/containerd/containerd/api/events/container.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:		github.com/containerd/containerd/api/events/container.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:		github.com/containerd/containerd/api/events/content.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:		github.com/containerd/containerd/api/events/image.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:		github.com/containerd/containerd/api/events/namespace.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:		github.com/containerd/containerd/api/events/snapshot.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:		github.com/containerd/containerd/api/events/task.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:// skipping weak import containerd_plugin "github.com/containerd/containerd/protobuf/plugin"
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:import typeurl "github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:	proto.RegisterType((*ContainerCreate)(nil), "containerd.events.ContainerCreate")
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:	proto.RegisterType((*ContainerCreate_Runtime)(nil), "containerd.events.ContainerCreate.Runtime")
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:	proto.RegisterType((*ContainerUpdate)(nil), "containerd.events.ContainerUpdate")
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:	proto.RegisterType((*ContainerDelete)(nil), "containerd.events.ContainerDelete")
src/runtime/vendor/github.com/containerd/containerd/api/events/container.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/events/container.proto", fileDescriptorContainer)
src/runtime/vendor/github.com/containerd/containerd/api/events/container.proto:package containerd.events;
src/runtime/vendor/github.com/containerd/containerd/api/events/container.proto:import weak "github.com/containerd/containerd/protobuf/plugin/fieldpath.proto";
src/runtime/vendor/github.com/containerd/containerd/api/events/container.proto:option go_package = "github.com/containerd/containerd/api/events;events";
src/runtime/vendor/github.com/containerd/containerd/api/events/container.proto:option (containerd.plugin.fieldpath_all) = true;
src/runtime/vendor/github.com/containerd/containerd/api/events/content.pb.go:// source: github.com/containerd/containerd/api/events/content.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/content.pb.go:// skipping weak import containerd_plugin "github.com/containerd/containerd/protobuf/plugin"
src/runtime/vendor/github.com/containerd/containerd/api/events/content.pb.go:	proto.RegisterType((*ContentDelete)(nil), "containerd.events.ContentDelete")
src/runtime/vendor/github.com/containerd/containerd/api/events/content.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/events/content.proto", fileDescriptorContent)
src/runtime/vendor/github.com/containerd/containerd/api/events/content.proto:package containerd.events;
src/runtime/vendor/github.com/containerd/containerd/api/events/content.proto:import weak "github.com/containerd/containerd/protobuf/plugin/fieldpath.proto";
src/runtime/vendor/github.com/containerd/containerd/api/events/content.proto:option go_package = "github.com/containerd/containerd/api/events;events";
src/runtime/vendor/github.com/containerd/containerd/api/events/content.proto:option (containerd.plugin.fieldpath_all) = true;
src/runtime/vendor/github.com/containerd/containerd/api/events/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/api/events/doc.go:// containerd.
src/runtime/vendor/github.com/containerd/containerd/api/events/image.pb.go:// source: github.com/containerd/containerd/api/events/image.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/image.pb.go:// skipping weak import containerd_plugin "github.com/containerd/containerd/protobuf/plugin"
src/runtime/vendor/github.com/containerd/containerd/api/events/image.pb.go:	proto.RegisterType((*ImageCreate)(nil), "containerd.services.images.v1.ImageCreate")
src/runtime/vendor/github.com/containerd/containerd/api/events/image.pb.go:	proto.RegisterType((*ImageUpdate)(nil), "containerd.services.images.v1.ImageUpdate")
src/runtime/vendor/github.com/containerd/containerd/api/events/image.pb.go:	proto.RegisterType((*ImageDelete)(nil), "containerd.services.images.v1.ImageDelete")
src/runtime/vendor/github.com/containerd/containerd/api/events/image.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/events/image.proto", fileDescriptorImage)
src/runtime/vendor/github.com/containerd/containerd/api/events/image.proto:package containerd.services.images.v1;
src/runtime/vendor/github.com/containerd/containerd/api/events/image.proto:import weak "github.com/containerd/containerd/protobuf/plugin/fieldpath.proto";
src/runtime/vendor/github.com/containerd/containerd/api/events/image.proto:option go_package = "github.com/containerd/containerd/api/events;events";
src/runtime/vendor/github.com/containerd/containerd/api/events/image.proto:option (containerd.plugin.fieldpath_all) = true;
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.pb.go:// source: github.com/containerd/containerd/api/events/namespace.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.pb.go:// skipping weak import containerd_plugin "github.com/containerd/containerd/protobuf/plugin"
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.pb.go:	proto.RegisterType((*NamespaceCreate)(nil), "containerd.events.NamespaceCreate")
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.pb.go:	proto.RegisterType((*NamespaceUpdate)(nil), "containerd.events.NamespaceUpdate")
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.pb.go:	proto.RegisterType((*NamespaceDelete)(nil), "containerd.events.NamespaceDelete")
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/events/namespace.proto", fileDescriptorNamespace)
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.proto:package containerd.events;
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.proto:import weak "github.com/containerd/containerd/protobuf/plugin/fieldpath.proto";
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.proto:option go_package = "github.com/containerd/containerd/api/events;events";
src/runtime/vendor/github.com/containerd/containerd/api/events/namespace.proto:option (containerd.plugin.fieldpath_all) = true;
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.pb.go:// source: github.com/containerd/containerd/api/events/snapshot.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.pb.go:// skipping weak import containerd_plugin "github.com/containerd/containerd/protobuf/plugin"
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.pb.go:	proto.RegisterType((*SnapshotPrepare)(nil), "containerd.events.SnapshotPrepare")
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.pb.go:	proto.RegisterType((*SnapshotCommit)(nil), "containerd.events.SnapshotCommit")
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.pb.go:	proto.RegisterType((*SnapshotRemove)(nil), "containerd.events.SnapshotRemove")
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/events/snapshot.proto", fileDescriptorSnapshot)
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.proto:package containerd.events;
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.proto:import weak "github.com/containerd/containerd/protobuf/plugin/fieldpath.proto";
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.proto:option go_package = "github.com/containerd/containerd/api/events;events";
src/runtime/vendor/github.com/containerd/containerd/api/events/snapshot.proto:option (containerd.plugin.fieldpath_all) = true;
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:// source: github.com/containerd/containerd/api/events/task.proto
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:import containerd_types "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:// skipping weak import containerd_plugin "github.com/containerd/containerd/protobuf/plugin"
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	Rootfs      []*containerd_types.Mount `protobuf:"bytes,3,rep,name=rootfs" json:"rootfs,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskCreate)(nil), "containerd.events.TaskCreate")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskStart)(nil), "containerd.events.TaskStart")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskDelete)(nil), "containerd.events.TaskDelete")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskIO)(nil), "containerd.events.TaskIO")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskExit)(nil), "containerd.events.TaskExit")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskOOM)(nil), "containerd.events.TaskOOM")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskExecAdded)(nil), "containerd.events.TaskExecAdded")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskExecStarted)(nil), "containerd.events.TaskExecStarted")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskPaused)(nil), "containerd.events.TaskPaused")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskResumed)(nil), "containerd.events.TaskResumed")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterType((*TaskCheckpointed)(nil), "containerd.events.TaskCheckpointed")
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:		`Rootfs:` + strings.Replace(fmt.Sprintf("%v", this.Rootfs), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:			m.Rootfs = append(m.Rootfs, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/events/task.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/events/task.proto", fileDescriptorTask)
src/runtime/vendor/github.com/containerd/containerd/api/events/task.proto:package containerd.events;
src/runtime/vendor/github.com/containerd/containerd/api/events/task.proto:import "github.com/containerd/containerd/api/types/mount.proto";
src/runtime/vendor/github.com/containerd/containerd/api/events/task.proto:import weak "github.com/containerd/containerd/protobuf/plugin/fieldpath.proto";
src/runtime/vendor/github.com/containerd/containerd/api/events/task.proto:option go_package = "github.com/containerd/containerd/api/events;events";
src/runtime/vendor/github.com/containerd/containerd/api/events/task.proto:option (containerd.plugin.fieldpath_all) = true;
src/runtime/vendor/github.com/containerd/containerd/api/events/task.proto:	repeated containerd.types.Mount rootfs = 3;
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:// source: github.com/containerd/containerd/api/services/containers/v1/containers.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:		github.com/containerd/containerd/api/services/containers/v1/containers.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*Container)(nil), "containerd.services.containers.v1.Container")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*Container_Runtime)(nil), "containerd.services.containers.v1.Container.Runtime")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*GetContainerRequest)(nil), "containerd.services.containers.v1.GetContainerRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*GetContainerResponse)(nil), "containerd.services.containers.v1.GetContainerResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*ListContainersRequest)(nil), "containerd.services.containers.v1.ListContainersRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*ListContainersResponse)(nil), "containerd.services.containers.v1.ListContainersResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*CreateContainerRequest)(nil), "containerd.services.containers.v1.CreateContainerRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*CreateContainerResponse)(nil), "containerd.services.containers.v1.CreateContainerResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*UpdateContainerRequest)(nil), "containerd.services.containers.v1.UpdateContainerRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*UpdateContainerResponse)(nil), "containerd.services.containers.v1.UpdateContainerResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*DeleteContainerRequest)(nil), "containerd.services.containers.v1.DeleteContainerRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterType((*ListContainerMessage)(nil), "containerd.services.containers.v1.ListContainerMessage")
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.containers.v1.Containers/Get", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.containers.v1.Containers/List", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	stream, err := grpc.NewClientStream(ctx, &_Containers_serviceDesc.Streams[0], c.cc, "/containerd.services.containers.v1.Containers/ListStream", opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.containers.v1.Containers/Create", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.containers.v1.Containers/Update", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.containers.v1.Containers/Delete", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:		FullMethod: "/containerd.services.containers.v1.Containers/Get",
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:		FullMethod: "/containerd.services.containers.v1.Containers/List",
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:		FullMethod: "/containerd.services.containers.v1.Containers/Create",
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:		FullMethod: "/containerd.services.containers.v1.Containers/Update",
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:		FullMethod: "/containerd.services.containers.v1.Containers/Delete",
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	ServiceName: "containerd.services.containers.v1.Containers",
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	Metadata: "github.com/containerd/containerd/api/services/containers/v1/containers.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/containers/v1/containers.proto", fileDescriptorContainers)
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.proto:package containerd.services.containers.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.proto:option go_package = "github.com/containerd/containerd/api/services/containers/v1;containers";
src/runtime/vendor/github.com/containerd/containerd/api/services/containers/v1/containers.proto:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:// source: github.com/containerd/containerd/api/services/content/v1/content.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:		github.com/containerd/containerd/api/services/content/v1/content.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	Action WriteAction `protobuf:"varint,1,opt,name=action,proto3,enum=containerd.services.content.v1.WriteAction" json:"action,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	Action WriteAction `protobuf:"varint,1,opt,name=action,proto3,enum=containerd.services.content.v1.WriteAction" json:"action,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*Info)(nil), "containerd.services.content.v1.Info")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*InfoRequest)(nil), "containerd.services.content.v1.InfoRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*InfoResponse)(nil), "containerd.services.content.v1.InfoResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*UpdateRequest)(nil), "containerd.services.content.v1.UpdateRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*UpdateResponse)(nil), "containerd.services.content.v1.UpdateResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*ListContentRequest)(nil), "containerd.services.content.v1.ListContentRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*ListContentResponse)(nil), "containerd.services.content.v1.ListContentResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*DeleteContentRequest)(nil), "containerd.services.content.v1.DeleteContentRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*ReadContentRequest)(nil), "containerd.services.content.v1.ReadContentRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*ReadContentResponse)(nil), "containerd.services.content.v1.ReadContentResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*Status)(nil), "containerd.services.content.v1.Status")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*StatusRequest)(nil), "containerd.services.content.v1.StatusRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*StatusResponse)(nil), "containerd.services.content.v1.StatusResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*ListStatusesRequest)(nil), "containerd.services.content.v1.ListStatusesRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*ListStatusesResponse)(nil), "containerd.services.content.v1.ListStatusesResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*WriteContentRequest)(nil), "containerd.services.content.v1.WriteContentRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*WriteContentResponse)(nil), "containerd.services.content.v1.WriteContentResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterType((*AbortRequest)(nil), "containerd.services.content.v1.AbortRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterEnum("containerd.services.content.v1.WriteAction", WriteAction_name, WriteAction_value)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.content.v1.Content/Info", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.content.v1.Content/Update", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	stream, err := grpc.NewClientStream(ctx, &_Content_serviceDesc.Streams[0], c.cc, "/containerd.services.content.v1.Content/List", opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.content.v1.Content/Delete", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	stream, err := grpc.NewClientStream(ctx, &_Content_serviceDesc.Streams[1], c.cc, "/containerd.services.content.v1.Content/Read", opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.content.v1.Content/Status", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.content.v1.Content/ListStatuses", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	stream, err := grpc.NewClientStream(ctx, &_Content_serviceDesc.Streams[2], c.cc, "/containerd.services.content.v1.Content/Write", opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.content.v1.Content/Abort", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:		FullMethod: "/containerd.services.content.v1.Content/Info",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:		FullMethod: "/containerd.services.content.v1.Content/Update",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:		FullMethod: "/containerd.services.content.v1.Content/Delete",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:		FullMethod: "/containerd.services.content.v1.Content/Status",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:		FullMethod: "/containerd.services.content.v1.Content/ListStatuses",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:		FullMethod: "/containerd.services.content.v1.Content/Abort",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	ServiceName: "containerd.services.content.v1.Content",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	Metadata: "github.com/containerd/containerd/api/services/content/v1/content.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/content/v1/content.proto", fileDescriptorContent)
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.proto:package containerd.services.content.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.proto:option go_package = "github.com/containerd/containerd/api/services/content/v1;content";
src/runtime/vendor/github.com/containerd/containerd/api/services/content/v1/content.proto:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:// source: github.com/containerd/containerd/api/services/diff/v1/diff.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		github.com/containerd/containerd/api/services/diff/v1/diff.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:import containerd_types "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:import containerd_types1 "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	Diff   *containerd_types1.Descriptor `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	Mounts []*containerd_types.Mount     `protobuf:"bytes,2,rep,name=mounts" json:"mounts,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	Applied *containerd_types1.Descriptor `protobuf:"bytes,1,opt,name=applied" json:"applied,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	Left []*containerd_types.Mount `protobuf:"bytes,1,rep,name=left" json:"left,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	Right []*containerd_types.Mount `protobuf:"bytes,2,rep,name=right" json:"right,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	Diff *containerd_types1.Descriptor `protobuf:"bytes,3,opt,name=diff" json:"diff,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	proto.RegisterType((*ApplyRequest)(nil), "containerd.services.diff.v1.ApplyRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	proto.RegisterType((*ApplyResponse)(nil), "containerd.services.diff.v1.ApplyResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	proto.RegisterType((*DiffRequest)(nil), "containerd.services.diff.v1.DiffRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	proto.RegisterType((*DiffResponse)(nil), "containerd.services.diff.v1.DiffResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.diff.v1.Diff/Apply", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.diff.v1.Diff/Diff", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		FullMethod: "/containerd.services.diff.v1.Diff/Apply",
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		FullMethod: "/containerd.services.diff.v1.Diff/Diff",
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	ServiceName: "containerd.services.diff.v1.Diff",
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	Metadata: "github.com/containerd/containerd/api/services/diff/v1/diff.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		`Diff:` + strings.Replace(fmt.Sprintf("%v", this.Diff), "Descriptor", "containerd_types1.Descriptor", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		`Mounts:` + strings.Replace(fmt.Sprintf("%v", this.Mounts), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		`Applied:` + strings.Replace(fmt.Sprintf("%v", this.Applied), "Descriptor", "containerd_types1.Descriptor", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		`Left:` + strings.Replace(fmt.Sprintf("%v", this.Left), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		`Right:` + strings.Replace(fmt.Sprintf("%v", this.Right), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:		`Diff:` + strings.Replace(fmt.Sprintf("%v", this.Diff), "Descriptor", "containerd_types1.Descriptor", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:				m.Diff = &containerd_types1.Descriptor{}
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:			m.Mounts = append(m.Mounts, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:				m.Applied = &containerd_types1.Descriptor{}
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:			m.Left = append(m.Left, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:			m.Right = append(m.Right, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:				m.Diff = &containerd_types1.Descriptor{}
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/diff/v1/diff.proto", fileDescriptorDiff)
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:package containerd.services.diff.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:import "github.com/containerd/containerd/api/types/mount.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:import "github.com/containerd/containerd/api/types/descriptor.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:option go_package = "github.com/containerd/containerd/api/services/diff/v1;diff";
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:	containerd.types.Descriptor diff = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:	repeated containerd.types.Mount mounts = 2;
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:	containerd.types.Descriptor applied = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:	repeated containerd.types.Mount left = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:	repeated containerd.types.Mount right = 2;
src/runtime/vendor/github.com/containerd/containerd/api/services/diff/v1/diff.proto:	containerd.types.Descriptor diff = 3;
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:// source: github.com/containerd/containerd/api/services/events/v1/events.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:		github.com/containerd/containerd/api/services/events/v1/events.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:// skipping weak import containerd_plugin "github.com/containerd/containerd/protobuf/plugin"
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:import typeurl "github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	proto.RegisterType((*PublishRequest)(nil), "containerd.services.events.v1.PublishRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	proto.RegisterType((*ForwardRequest)(nil), "containerd.services.events.v1.ForwardRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	proto.RegisterType((*SubscribeRequest)(nil), "containerd.services.events.v1.SubscribeRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	proto.RegisterType((*Envelope)(nil), "containerd.services.events.v1.Envelope")
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	// Unlike many other methods in containerd, subscribers will get messages
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.events.v1.Events/Publish", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.events.v1.Events/Forward", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[0], c.cc, "/containerd.services.events.v1.Events/Subscribe", opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	// Unlike many other methods in containerd, subscribers will get messages
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:		FullMethod: "/containerd.services.events.v1.Events/Publish",
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:		FullMethod: "/containerd.services.events.v1.Events/Forward",
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	ServiceName: "containerd.services.events.v1.Events",
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	Metadata: "github.com/containerd/containerd/api/services/events/v1/events.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/events/v1/events.proto", fileDescriptorEvents)
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.proto:package containerd.services.events.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.proto:import weak "github.com/containerd/containerd/protobuf/plugin/fieldpath.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.proto:option go_package = "github.com/containerd/containerd/api/services/events/v1;events";
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.proto:	// Unlike many other methods in containerd, subscribers will get messages
src/runtime/vendor/github.com/containerd/containerd/api/services/events/v1/events.proto:	option (containerd.plugin.fieldpath) = true;
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/docs.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:// source: github.com/containerd/containerd/api/services/images/v1/images.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:		github.com/containerd/containerd/api/services/images/v1/images.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:import containerd_types "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	Target containerd_types.Descriptor `protobuf:"bytes,3,opt,name=target" json:"target"`
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*Image)(nil), "containerd.services.images.v1.Image")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*GetImageRequest)(nil), "containerd.services.images.v1.GetImageRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*GetImageResponse)(nil), "containerd.services.images.v1.GetImageResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*CreateImageRequest)(nil), "containerd.services.images.v1.CreateImageRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*CreateImageResponse)(nil), "containerd.services.images.v1.CreateImageResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*UpdateImageRequest)(nil), "containerd.services.images.v1.UpdateImageRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*UpdateImageResponse)(nil), "containerd.services.images.v1.UpdateImageResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*ListImagesRequest)(nil), "containerd.services.images.v1.ListImagesRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*ListImagesResponse)(nil), "containerd.services.images.v1.ListImagesResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterType((*DeleteImageRequest)(nil), "containerd.services.images.v1.DeleteImageRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	// List returns a list of all images known to containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.images.v1.Images/Get", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.images.v1.Images/List", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.images.v1.Images/Create", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.images.v1.Images/Update", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.images.v1.Images/Delete", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	// List returns a list of all images known to containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:		FullMethod: "/containerd.services.images.v1.Images/Get",
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:		FullMethod: "/containerd.services.images.v1.Images/List",
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:		FullMethod: "/containerd.services.images.v1.Images/Create",
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:		FullMethod: "/containerd.services.images.v1.Images/Update",
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:		FullMethod: "/containerd.services.images.v1.Images/Delete",
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	ServiceName: "containerd.services.images.v1.Images",
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	Metadata: "github.com/containerd/containerd/api/services/images/v1/images.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:		`Target:` + strings.Replace(strings.Replace(this.Target.String(), "Descriptor", "containerd_types.Descriptor", 1), `&`, ``, 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/images/v1/images.proto", fileDescriptorImages)
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:package containerd.services.images.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:import "github.com/containerd/containerd/api/types/descriptor.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:option go_package = "github.com/containerd/containerd/api/services/images/v1;images";
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:// Images is a service that allows one to register images with containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:// In containerd, an image is merely the mapping of a name to a content root,
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:	// List returns a list of all images known to containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:	containerd.types.Descriptor target = 3 [(gogoproto.nullable) = false];
src/runtime/vendor/github.com/containerd/containerd/api/services/images/v1/images.proto:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:// source: github.com/containerd/containerd/api/services/introspection/v1/introspection.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:		github.com/containerd/containerd/api/services/introspection/v1/introspection.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:import containerd_types "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	Platforms []containerd_types.Platform `protobuf:"bytes,4,rep,name=platforms" json:"platforms"`
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	proto.RegisterType((*Plugin)(nil), "containerd.services.introspection.v1.Plugin")
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	proto.RegisterType((*PluginsRequest)(nil), "containerd.services.introspection.v1.PluginsRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	proto.RegisterType((*PluginsResponse)(nil), "containerd.services.introspection.v1.PluginsResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	// Plugins returns a list of plugins in containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	// containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.introspection.v1.Introspection/Plugins", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	// Plugins returns a list of plugins in containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	// containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:		FullMethod: "/containerd.services.introspection.v1.Introspection/Plugins",
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	ServiceName: "containerd.services.introspection.v1.Introspection",
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	Metadata: "github.com/containerd/containerd/api/services/introspection/v1/introspection.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:		`Platforms:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Platforms), "Platform", "containerd_types.Platform", 1), `&`, ``, 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:			m.Platforms = append(m.Platforms, containerd_types.Platform{})
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/introspection/v1/introspection.proto", fileDescriptorIntrospection)
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.proto:package containerd.services.introspection.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.proto:import "github.com/containerd/containerd/api/types/platform.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.proto:option go_package = "github.com/containerd/containerd/api/services/introspection/v1;introspection";
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.proto:	// Plugins returns a list of plugins in containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.proto:	// containerd.
src/runtime/vendor/github.com/containerd/containerd/api/services/introspection/v1/introspection.proto:	// containerd filter package.
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:// source: github.com/containerd/containerd/api/services/leases/v1/leases.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:		github.com/containerd/containerd/api/services/leases/v1/leases.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	proto.RegisterType((*Lease)(nil), "containerd.services.leases.v1.Lease")
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	proto.RegisterType((*CreateRequest)(nil), "containerd.services.leases.v1.CreateRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	proto.RegisterType((*CreateResponse)(nil), "containerd.services.leases.v1.CreateResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	proto.RegisterType((*DeleteRequest)(nil), "containerd.services.leases.v1.DeleteRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	proto.RegisterType((*ListRequest)(nil), "containerd.services.leases.v1.ListRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	proto.RegisterType((*ListResponse)(nil), "containerd.services.leases.v1.ListResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.leases.v1.Leases/Create", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.leases.v1.Leases/Delete", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.leases.v1.Leases/List", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:		FullMethod: "/containerd.services.leases.v1.Leases/Create",
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:		FullMethod: "/containerd.services.leases.v1.Leases/Delete",
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:		FullMethod: "/containerd.services.leases.v1.Leases/List",
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	ServiceName: "containerd.services.leases.v1.Leases",
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	Metadata: "github.com/containerd/containerd/api/services/leases/v1/leases.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/leases/v1/leases.proto", fileDescriptorLeases)
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.proto:package containerd.services.leases.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/leases/v1/leases.proto:option go_package = "github.com/containerd/containerd/api/services/leases/v1;leases";
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:// source: github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:		github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*Namespace)(nil), "containerd.services.namespaces.v1.Namespace")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*GetNamespaceRequest)(nil), "containerd.services.namespaces.v1.GetNamespaceRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*GetNamespaceResponse)(nil), "containerd.services.namespaces.v1.GetNamespaceResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*ListNamespacesRequest)(nil), "containerd.services.namespaces.v1.ListNamespacesRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*ListNamespacesResponse)(nil), "containerd.services.namespaces.v1.ListNamespacesResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*CreateNamespaceRequest)(nil), "containerd.services.namespaces.v1.CreateNamespaceRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*CreateNamespaceResponse)(nil), "containerd.services.namespaces.v1.CreateNamespaceResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*UpdateNamespaceRequest)(nil), "containerd.services.namespaces.v1.UpdateNamespaceRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*UpdateNamespaceResponse)(nil), "containerd.services.namespaces.v1.UpdateNamespaceResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterType((*DeleteNamespaceRequest)(nil), "containerd.services.namespaces.v1.DeleteNamespaceRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Get", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/List", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Create", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Update", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Delete", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Get",
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:		FullMethod: "/containerd.services.namespaces.v1.Namespaces/List",
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Create",
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Update",
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Delete",
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	ServiceName: "containerd.services.namespaces.v1.Namespaces",
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	Metadata: "github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto", fileDescriptorNamespace)
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto:package containerd.services.namespaces.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto:option go_package = "github.com/containerd/containerd/api/services/namespaces/v1;namespaces";
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto:// Namespaces provides the ability to manipulate containerd namespaces.
src/runtime/vendor/github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto:// Unless otherwise noted, operations in containerd apply only to the namespace
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:// source: github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:import containerd_types "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	Mounts []*containerd_types.Mount `protobuf:"bytes,1,rep,name=mounts" json:"mounts,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	Mounts []*containerd_types.Mount `protobuf:"bytes,1,rep,name=mounts" json:"mounts,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	Mounts []*containerd_types.Mount `protobuf:"bytes,1,rep,name=mounts" json:"mounts,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	Kind   Kind   `protobuf:"varint,3,opt,name=kind,proto3,enum=containerd.services.snapshots.v1.Kind" json:"kind,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*PrepareSnapshotRequest)(nil), "containerd.services.snapshots.v1.PrepareSnapshotRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*PrepareSnapshotResponse)(nil), "containerd.services.snapshots.v1.PrepareSnapshotResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*ViewSnapshotRequest)(nil), "containerd.services.snapshots.v1.ViewSnapshotRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*ViewSnapshotResponse)(nil), "containerd.services.snapshots.v1.ViewSnapshotResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*MountsRequest)(nil), "containerd.services.snapshots.v1.MountsRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*MountsResponse)(nil), "containerd.services.snapshots.v1.MountsResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*RemoveSnapshotRequest)(nil), "containerd.services.snapshots.v1.RemoveSnapshotRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*CommitSnapshotRequest)(nil), "containerd.services.snapshots.v1.CommitSnapshotRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*StatSnapshotRequest)(nil), "containerd.services.snapshots.v1.StatSnapshotRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*Info)(nil), "containerd.services.snapshots.v1.Info")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*StatSnapshotResponse)(nil), "containerd.services.snapshots.v1.StatSnapshotResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*UpdateSnapshotRequest)(nil), "containerd.services.snapshots.v1.UpdateSnapshotRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*UpdateSnapshotResponse)(nil), "containerd.services.snapshots.v1.UpdateSnapshotResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*ListSnapshotsRequest)(nil), "containerd.services.snapshots.v1.ListSnapshotsRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*ListSnapshotsResponse)(nil), "containerd.services.snapshots.v1.ListSnapshotsResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*UsageRequest)(nil), "containerd.services.snapshots.v1.UsageRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterType((*UsageResponse)(nil), "containerd.services.snapshots.v1.UsageResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterEnum("containerd.services.snapshots.v1.Kind", Kind_name, Kind_value)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/Prepare", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/View", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/Mounts", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/Commit", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/Remove", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/Stat", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/Update", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	stream, err := grpc.NewClientStream(ctx, &_Snapshots_serviceDesc.Streams[0], c.cc, "/containerd.services.snapshots.v1.Snapshots/List", opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.snapshots.v1.Snapshots/Usage", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/Prepare",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/View",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/Mounts",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/Commit",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/Remove",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/Stat",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/Update",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		FullMethod: "/containerd.services.snapshots.v1.Snapshots/Usage",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	ServiceName: "containerd.services.snapshots.v1.Snapshots",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	Metadata: "github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		`Mounts:` + strings.Replace(fmt.Sprintf("%v", this.Mounts), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		`Mounts:` + strings.Replace(fmt.Sprintf("%v", this.Mounts), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:		`Mounts:` + strings.Replace(fmt.Sprintf("%v", this.Mounts), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:			m.Mounts = append(m.Mounts, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:			m.Mounts = append(m.Mounts, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:			m.Mounts = append(m.Mounts, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto", fileDescriptorSnapshots)
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto:package containerd.services.snapshots.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto:import "github.com/containerd/containerd/api/types/mount.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto:option go_package = "github.com/containerd/containerd/api/services/snapshots/v1;snapshots";
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto:	repeated containerd.types.Mount mounts = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto:	repeated containerd.types.Mount mounts = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto:	repeated containerd.types.Mount mounts = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:// source: github.com/containerd/containerd/api/services/tasks/v1/tasks.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		github.com/containerd/containerd/api/services/tasks/v1/tasks.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:import containerd_types "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:import containerd_types1 "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:import containerd_types2 "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:import containerd_v1_types "github.com/containerd/containerd/api/types/task"
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Rootfs     []*containerd_types.Mount     `protobuf:"bytes,3,rep,name=rootfs" json:"rootfs,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Checkpoint *containerd_types2.Descriptor `protobuf:"bytes,8,opt,name=checkpoint" json:"checkpoint,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Process *containerd_v1_types.Process `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Tasks []*containerd_v1_types.Process `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Processes []*containerd_v1_types.ProcessInfo `protobuf:"bytes,1,rep,name=processes" json:"processes,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Descriptors []*containerd_types2.Descriptor `protobuf:"bytes,1,rep,name=descriptors" json:"descriptors,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Metrics []*containerd_types1.Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*CreateTaskRequest)(nil), "containerd.services.tasks.v1.CreateTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*CreateTaskResponse)(nil), "containerd.services.tasks.v1.CreateTaskResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*StartRequest)(nil), "containerd.services.tasks.v1.StartRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*StartResponse)(nil), "containerd.services.tasks.v1.StartResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*DeleteTaskRequest)(nil), "containerd.services.tasks.v1.DeleteTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*DeleteResponse)(nil), "containerd.services.tasks.v1.DeleteResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*DeleteProcessRequest)(nil), "containerd.services.tasks.v1.DeleteProcessRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*GetRequest)(nil), "containerd.services.tasks.v1.GetRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*GetResponse)(nil), "containerd.services.tasks.v1.GetResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ListTasksRequest)(nil), "containerd.services.tasks.v1.ListTasksRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ListTasksResponse)(nil), "containerd.services.tasks.v1.ListTasksResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*KillRequest)(nil), "containerd.services.tasks.v1.KillRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ExecProcessRequest)(nil), "containerd.services.tasks.v1.ExecProcessRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ExecProcessResponse)(nil), "containerd.services.tasks.v1.ExecProcessResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ResizePtyRequest)(nil), "containerd.services.tasks.v1.ResizePtyRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*CloseIORequest)(nil), "containerd.services.tasks.v1.CloseIORequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*PauseTaskRequest)(nil), "containerd.services.tasks.v1.PauseTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ResumeTaskRequest)(nil), "containerd.services.tasks.v1.ResumeTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ListPidsRequest)(nil), "containerd.services.tasks.v1.ListPidsRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*ListPidsResponse)(nil), "containerd.services.tasks.v1.ListPidsResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*CheckpointTaskRequest)(nil), "containerd.services.tasks.v1.CheckpointTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*CheckpointTaskResponse)(nil), "containerd.services.tasks.v1.CheckpointTaskResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*UpdateTaskRequest)(nil), "containerd.services.tasks.v1.UpdateTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*MetricsRequest)(nil), "containerd.services.tasks.v1.MetricsRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*MetricsResponse)(nil), "containerd.services.tasks.v1.MetricsResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*WaitRequest)(nil), "containerd.services.tasks.v1.WaitRequest")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterType((*WaitResponse)(nil), "containerd.services.tasks.v1.WaitResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Create", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Start", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Delete", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/DeleteProcess", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Get", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/List", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Kill", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Exec", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/ResizePty", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/CloseIO", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Pause", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Resume", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/ListPids", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Checkpoint", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Update", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Metrics", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.tasks.v1.Tasks/Wait", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Create",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Start",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Delete",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/DeleteProcess",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Get",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/List",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Kill",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Exec",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/ResizePty",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/CloseIO",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Pause",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Resume",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/ListPids",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Checkpoint",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Update",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Metrics",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		FullMethod: "/containerd.services.tasks.v1.Tasks/Wait",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	ServiceName: "containerd.services.tasks.v1.Tasks",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	Metadata: "github.com/containerd/containerd/api/services/tasks/v1/tasks.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		`Rootfs:` + strings.Replace(fmt.Sprintf("%v", this.Rootfs), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		`Checkpoint:` + strings.Replace(fmt.Sprintf("%v", this.Checkpoint), "Descriptor", "containerd_types2.Descriptor", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		`Process:` + strings.Replace(fmt.Sprintf("%v", this.Process), "Process", "containerd_v1_types.Process", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		`Tasks:` + strings.Replace(fmt.Sprintf("%v", this.Tasks), "Process", "containerd_v1_types.Process", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		`Processes:` + strings.Replace(fmt.Sprintf("%v", this.Processes), "ProcessInfo", "containerd_v1_types.ProcessInfo", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		`Descriptors:` + strings.Replace(fmt.Sprintf("%v", this.Descriptors), "Descriptor", "containerd_types2.Descriptor", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:		`Metrics:` + strings.Replace(fmt.Sprintf("%v", this.Metrics), "Metric", "containerd_types1.Metric", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:			m.Rootfs = append(m.Rootfs, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:				m.Checkpoint = &containerd_types2.Descriptor{}
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:				m.Process = &containerd_v1_types.Process{}
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:			m.Tasks = append(m.Tasks, &containerd_v1_types.Process{})
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:			m.Processes = append(m.Processes, &containerd_v1_types.ProcessInfo{})
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:			m.Descriptors = append(m.Descriptors, &containerd_types2.Descriptor{})
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:			m.Metrics = append(m.Metrics, &containerd_types1.Metric{})
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/tasks/v1/tasks.proto", fileDescriptorTasks)
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:package containerd.services.tasks.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:import "github.com/containerd/containerd/api/types/mount.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:import "github.com/containerd/containerd/api/types/metrics.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:import "github.com/containerd/containerd/api/types/descriptor.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:import "github.com/containerd/containerd/api/types/task/task.proto";
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:option go_package = "github.com/containerd/containerd/api/services/tasks/v1;tasks";
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:	repeated containerd.types.Mount rootfs = 3;
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:	containerd.types.Descriptor checkpoint = 8;
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:	containerd.v1.types.Process process = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:	repeated containerd.v1.types.Process tasks = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:	repeated containerd.v1.types.ProcessInfo processes = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.proto:	repeated containerd.types.Descriptor descriptors = 1;
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:// source: github.com/containerd/containerd/api/services/version/v1/version.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:		github.com/containerd/containerd/api/services/version/v1/version.proto
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:	proto.RegisterType((*VersionResponse)(nil), "containerd.services.version.v1.VersionResponse")
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:	err := grpc.Invoke(ctx, "/containerd.services.version.v1.Version/Version", in, out, c.cc, opts...)
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:		FullMethod: "/containerd.services.version.v1.Version/Version",
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:	ServiceName: "containerd.services.version.v1.Version",
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:	Metadata: "github.com/containerd/containerd/api/services/version/v1/version.proto",
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/services/version/v1/version.proto", fileDescriptorVersion)
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.proto:package containerd.services.version.v1;
src/runtime/vendor/github.com/containerd/containerd/api/services/version/v1/version.proto:option go_package = "github.com/containerd/containerd/api/services/version/v1;version";
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.pb.go:// source: github.com/containerd/containerd/api/types/descriptor.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.pb.go:		github.com/containerd/containerd/api/types/descriptor.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.pb.go:		github.com/containerd/containerd/api/types/metrics.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.pb.go:		github.com/containerd/containerd/api/types/mount.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.pb.go:		github.com/containerd/containerd/api/types/platform.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.pb.go:	proto.RegisterType((*Descriptor)(nil), "containerd.types.Descriptor")
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/types/descriptor.proto", fileDescriptorDescriptor)
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.proto:package containerd.types;
src/runtime/vendor/github.com/containerd/containerd/api/types/descriptor.proto:option go_package = "github.com/containerd/containerd/api/types;types";
src/runtime/vendor/github.com/containerd/containerd/api/types/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/api/types/metrics.pb.go:// source: github.com/containerd/containerd/api/types/metrics.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/metrics.pb.go:	proto.RegisterType((*Metric)(nil), "containerd.types.Metric")
src/runtime/vendor/github.com/containerd/containerd/api/types/metrics.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/types/metrics.proto", fileDescriptorMetrics)
src/runtime/vendor/github.com/containerd/containerd/api/types/metrics.proto:package containerd.types;
src/runtime/vendor/github.com/containerd/containerd/api/types/metrics.proto:option go_package = "github.com/containerd/containerd/api/types;types";
src/runtime/vendor/github.com/containerd/containerd/api/types/mount.pb.go:// source: github.com/containerd/containerd/api/types/mount.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/mount.pb.go:	proto.RegisterType((*Mount)(nil), "containerd.types.Mount")
src/runtime/vendor/github.com/containerd/containerd/api/types/mount.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/types/mount.proto", fileDescriptorMount)
src/runtime/vendor/github.com/containerd/containerd/api/types/mount.proto:package containerd.types;
src/runtime/vendor/github.com/containerd/containerd/api/types/mount.proto:option go_package = "github.com/containerd/containerd/api/types;types";
src/runtime/vendor/github.com/containerd/containerd/api/types/platform.pb.go:// source: github.com/containerd/containerd/api/types/platform.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/platform.pb.go:	proto.RegisterType((*Platform)(nil), "containerd.types.Platform")
src/runtime/vendor/github.com/containerd/containerd/api/types/platform.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/types/platform.proto", fileDescriptorPlatform)
src/runtime/vendor/github.com/containerd/containerd/api/types/platform.proto:package containerd.types;
src/runtime/vendor/github.com/containerd/containerd/api/types/platform.proto:option go_package = "github.com/containerd/containerd/api/types;types";
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.pb.go:// source: github.com/containerd/containerd/api/types/task/task.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.pb.go:		github.com/containerd/containerd/api/types/task/task.proto
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.pb.go:	Status      Status    `protobuf:"varint,4,opt,name=status,proto3,enum=containerd.v1.types.Status" json:"status,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.pb.go:	proto.RegisterType((*Process)(nil), "containerd.v1.types.Process")
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.pb.go:	proto.RegisterType((*ProcessInfo)(nil), "containerd.v1.types.ProcessInfo")
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.pb.go:	proto.RegisterEnum("containerd.v1.types.Status", Status_name, Status_value)
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.pb.go:	proto.RegisterFile("github.com/containerd/containerd/api/types/task/task.proto", fileDescriptorTask)
src/runtime/vendor/github.com/containerd/containerd/api/types/task/task.proto:package containerd.v1.types;
src/runtime/vendor/github.com/containerd/containerd/archive/compression/compression.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/compression/compression.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/archive/strconv.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/tar.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/tar.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/archive/tar.go:	"github.com/containerd/continuity/fs"
src/runtime/vendor/github.com/containerd/containerd/archive/tar_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/tar_opts_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/tar_opts_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/tar_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/tar_unix.go:	"github.com/containerd/continuity/sysx"
src/runtime/vendor/github.com/containerd/containerd/archive/tar_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/tar_windows.go:	"github.com/containerd/containerd/sys"
src/runtime/vendor/github.com/containerd/containerd/archive/time.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/time_darwin.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/time_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/archive/time_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/cio/io.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/cio/io.go:	"github.com/containerd/containerd/defaults"
src/runtime/vendor/github.com/containerd/containerd/cio/io.go:// e.g. "/run/containerd/fifo", "/run/users/1001/containerd/fifo"
src/runtime/vendor/github.com/containerd/containerd/cio/io_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/cio/io_unix.go:	"github.com/containerd/fifo"
src/runtime/vendor/github.com/containerd/containerd/cio/io_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/cio/io_windows.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/client.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/client.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/client.go:	containersapi "github.com/containerd/containerd/api/services/containers/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	contentapi "github.com/containerd/containerd/api/services/content/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	diffapi "github.com/containerd/containerd/api/services/diff/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	eventsapi "github.com/containerd/containerd/api/services/events/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	imagesapi "github.com/containerd/containerd/api/services/images/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	introspectionapi "github.com/containerd/containerd/api/services/introspection/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	leasesapi "github.com/containerd/containerd/api/services/leases/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	namespacesapi "github.com/containerd/containerd/api/services/namespaces/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	snapshotsapi "github.com/containerd/containerd/api/services/snapshots/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/api/services/tasks/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	versionservice "github.com/containerd/containerd/api/services/version/v1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/client.go:	contentproxy "github.com/containerd/containerd/content/proxy"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/defaults"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/events"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/leases"
src/runtime/vendor/github.com/containerd/containerd/client.go:	leasesproxy "github.com/containerd/containerd/leases/proxy"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/pkg/dialer"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/plugin"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/remotes"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/remotes/docker"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/remotes/docker/schema1"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/containerd/snapshots"
src/runtime/vendor/github.com/containerd/containerd/client.go:	snproxy "github.com/containerd/containerd/snapshots/proxy"
src/runtime/vendor/github.com/containerd/containerd/client.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/client.go:	const prefix = "types.containerd.io"
src/runtime/vendor/github.com/containerd/containerd/client.go:// New returns a new containerd client that is connected to the containerd
src/runtime/vendor/github.com/containerd/containerd/client.go:// NewWithConn returns a new containerd client that is connected to the containerd
src/runtime/vendor/github.com/containerd/containerd/client.go:// Client is the client to interact with containerd and its various services
src/runtime/vendor/github.com/containerd/containerd/client.go:// Reconnect re-establishes the GRPC connection to the containerd daemon
src/runtime/vendor/github.com/containerd/containerd/client.go:		return errors.New("unable to reconnect to containerd, no connector available")
src/runtime/vendor/github.com/containerd/containerd/client.go:// containerd daemon and the healthcheck service returns the SERVING
src/runtime/vendor/github.com/containerd/containerd/client.go:// Containers returns all containers created in containerd
src/runtime/vendor/github.com/containerd/containerd/client.go:// Fetch downloads the provided content into containerd's content store
src/runtime/vendor/github.com/containerd/containerd/client.go:// Pull downloads the provided content into containerd's content store
src/runtime/vendor/github.com/containerd/containerd/client.go:		labels[fmt.Sprintf("containerd.io/gc.ref.content.%d", i)] = m.Digest.String()
src/runtime/vendor/github.com/containerd/containerd/client.go:// Close closes the clients connection to containerd
src/runtime/vendor/github.com/containerd/containerd/client.go:// Version of containerd
src/runtime/vendor/github.com/containerd/containerd/client.go:// Version returns the version of containerd that the client is connected to
src/runtime/vendor/github.com/containerd/containerd/client_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/client_opts.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/client_opts.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/client_opts.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/client_opts.go:	"github.com/containerd/containerd/remotes"
src/runtime/vendor/github.com/containerd/containerd/client_opts.go:// ClientOpt allows callers to set options on the containerd client
src/runtime/vendor/github.com/containerd/containerd/code-of-conduct.md:## containerd Community Code of Conduct
src/runtime/vendor/github.com/containerd/containerd/code-of-conduct.md:containerd follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).
src/runtime/vendor/github.com/containerd/containerd/container.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/container.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/api/services/tasks/v1"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/cio"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/oci"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/containerd/runtime/v2/runc/options"
src/runtime/vendor/github.com/containerd/containerd/container.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/container.go:	checkpointRuntimeNameLabel     = "io.containerd.checkpoint.runtime"
src/runtime/vendor/github.com/containerd/containerd/container.go:	checkpointSnapshotterNameLabel = "io.containerd.checkpoint.snapshotter"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	tasks "github.com/containerd/containerd/api/services/tasks/v1"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	"github.com/containerd/containerd/diff"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	"github.com/containerd/containerd/rootfs"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	"github.com/containerd/containerd/runtime/v2/runc/options"
src/runtime/vendor/github.com/containerd/containerd/container_checkpoint_opts.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:	"github.com/containerd/containerd/oci"
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/container_opts.go:// WithImageStopSignal sets a well-known containerd label (StopSignalLabel)
src/runtime/vendor/github.com/containerd/containerd/container_opts_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/container_opts_unix.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/container_opts_unix.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/container_opts_unix.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/container_opts_unix.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/container_opts_unix.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/container_restore_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/container_restore_opts.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/container_restore_opts.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/container_restore_opts.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/container_restore_opts.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/container_restore_opts.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/containerd.service:Description=containerd container runtime
src/runtime/vendor/github.com/containerd/containerd/containerd.service:Documentation=https://containerd.io
src/runtime/vendor/github.com/containerd/containerd/containerd.service:ExecStart=/usr/local/bin/containerd
src/runtime/vendor/github.com/containerd/containerd/containers/containers.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/containerstore.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/containerstore.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/containerstore.go:	containersapi "github.com/containerd/containerd/api/services/containers/v1"
src/runtime/vendor/github.com/containerd/containerd/containerstore.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/containerstore.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/content/content.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/content/helpers.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/content/helpers.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_reader.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_reader.go:	contentapi "github.com/containerd/containerd/api/services/content/v1"
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_store.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_store.go:	contentapi "github.com/containerd/containerd/api/services/content/v1"
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_store.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_store.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_store.go:// connection using the containerd content GRPC API.
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_writer.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_writer.go:	contentapi "github.com/containerd/containerd/api/services/content/v1"
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_writer.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/content/proxy/content_writer.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:	// DefaultRootDir is the default location used by containerd to store
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:	DefaultRootDir = "/var/lib/containerd"
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:	// DefaultStateDir is the default location used by containerd to store
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:	DefaultStateDir = "/run/containerd"
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:	DefaultAddress = "/run/containerd/containerd.sock"
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:	DefaultDebugAddress = "/run/containerd/debug.sock"
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_unix.go:	DefaultFIFODir = "/run/containerd/fifo"
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_windows.go:	// DefaultRootDir is the default location used by containerd to store
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_windows.go:	DefaultRootDir = filepath.Join(os.Getenv("programfiles"), "containerd", "root")
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_windows.go:	// DefaultStateDir is the default location used by containerd to store
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_windows.go:	DefaultStateDir = filepath.Join(os.Getenv("programfiles"), "containerd", "state")
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_windows.go:	DefaultAddress = `\\.\pipe\containerd-containerd`
src/runtime/vendor/github.com/containerd/containerd/defaults/defaults_windows.go:	DefaultDebugAddress = `\\.\pipe\containerd-debug`
src/runtime/vendor/github.com/containerd/containerd/defaults/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/defaults/doc.go:// containerd. These can be used on the client-side or server-side.
src/runtime/vendor/github.com/containerd/containerd/diff.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/diff.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/diff.go:	diffapi "github.com/containerd/containerd/api/services/diff/v1"
src/runtime/vendor/github.com/containerd/containerd/diff.go:	"github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/diff.go:	"github.com/containerd/containerd/diff"
src/runtime/vendor/github.com/containerd/containerd/diff.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/diff.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/diff/diff.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/diff/diff.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/errdefs/errors.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/errdefs/errors.go:// Package errdefs defines the common errors used throughout containerd
src/runtime/vendor/github.com/containerd/containerd/errdefs/errors.go:// Definitions of common error types used throughout containerd. All containerd
src/runtime/vendor/github.com/containerd/containerd/errdefs/grpc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/errdefs/grpc.go:// ToGRPC will attempt to map the backend containerd error into a grpc error,
src/runtime/vendor/github.com/containerd/containerd/events.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/events.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/events.go:	eventsapi "github.com/containerd/containerd/api/services/events/v1"
src/runtime/vendor/github.com/containerd/containerd/events.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/events.go:	"github.com/containerd/containerd/events"
src/runtime/vendor/github.com/containerd/containerd/events.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/events/events.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/events/events.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:	"github.com/containerd/containerd/events"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:	"github.com/containerd/containerd/filters"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:	"github.com/containerd/containerd/identifiers"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/events/exchange/exchange.go:// the standard containerd filters package syntax.
src/runtime/vendor/github.com/containerd/containerd/export.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/export.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/export.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/filters/adaptor.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/filters/filter.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/filters/filter.go:// filtration of items across the containerd API. The core is built on the
src/runtime/vendor/github.com/containerd/containerd/filters/filter.go:// operator. This is most useful for matching labels in containerd. The
src/runtime/vendor/github.com/containerd/containerd/filters/filter.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/filters/parser.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/filters/parser.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/filters/quote.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/filters/scanner.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/grpc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/grpc.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/grpc.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/identifiers/validate.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/identifiers/validate.go:// across containerd.
src/runtime/vendor/github.com/containerd/containerd/identifiers/validate.go:// Identifiers in containerd must be a alphanumeric, allowing limited
src/runtime/vendor/github.com/containerd/containerd/identifiers/validate.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/image.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/image.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/image.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/image.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/image.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/image.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/image.go:	"github.com/containerd/containerd/rootfs"
src/runtime/vendor/github.com/containerd/containerd/image.go:					"containerd.io/uncompressed": layer.Diff.Digest.String(),
src/runtime/vendor/github.com/containerd/containerd/image.go:			if _, err := cs.Update(ctx, cinfo, "labels.containerd.io/uncompressed"); err != nil {
src/runtime/vendor/github.com/containerd/containerd/image.go:				fmt.Sprintf("containerd.io/gc.ref.snapshot.%s", snapshotterName): rootfs,
src/runtime/vendor/github.com/containerd/containerd/image.go:		if _, err := cs.Update(ctx, cinfo, fmt.Sprintf("labels.containerd.io/gc.ref.snapshot.%s", snapshotterName)); err != nil {
src/runtime/vendor/github.com/containerd/containerd/image_store.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/image_store.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/image_store.go:	imagesapi "github.com/containerd/containerd/api/services/images/v1"
src/runtime/vendor/github.com/containerd/containerd/image_store.go:	"github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/image_store.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/image_store.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/images/archive/importer.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/images/archive/importer.go:	"github.com/containerd/containerd/archive/compression"
src/runtime/vendor/github.com/containerd/containerd/images/archive/importer.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/images/archive/importer.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/images/archive/importer.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/images/archive/reference.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/images/archive/reference.go:	"github.com/containerd/cri/pkg/util"
src/runtime/vendor/github.com/containerd/containerd/images/handlers.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/images/handlers.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/images/handlers.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/images/handlers.go:				info.Labels[fmt.Sprintf("containerd.io/gc.ref.content.%d", i)] = ch.Digest.String()
src/runtime/vendor/github.com/containerd/containerd/images/handlers.go:				fields = append(fields, fmt.Sprintf("labels.containerd.io/gc.ref.content.%d", i))
src/runtime/vendor/github.com/containerd/containerd/images/image.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/images/image.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/images/image.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/images/image.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/images/image.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/images/image.go:// Image provides the model for how containerd views container images.
src/runtime/vendor/github.com/containerd/containerd/images/importexport.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/images/importexport.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:// mediatype definitions for image components handled in containerd.
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1Checkpoint               = "application/vnd.containerd.container.criu.checkpoint.criu.tar"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1CheckpointPreDump        = "application/vnd.containerd.container.criu.checkpoint.predump.tar"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1Resource                 = "application/vnd.containerd.container.resource.tar"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1RW                       = "application/vnd.containerd.container.rw.tar"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1CheckpointConfig         = "application/vnd.containerd.container.checkpoint.config.v1+proto"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1CheckpointOptions        = "application/vnd.containerd.container.checkpoint.options.v1+proto"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1CheckpointRuntimeName    = "application/vnd.containerd.container.checkpoint.runtime.name"
src/runtime/vendor/github.com/containerd/containerd/images/mediatypes.go:	MediaTypeContainerd1CheckpointRuntimeOptions = "application/vnd.containerd.container.checkpoint.runtime.options+proto"
src/runtime/vendor/github.com/containerd/containerd/import.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/import.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/import.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/import.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/import.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/import.go:	"github.com/containerd/containerd/images/archive"
src/runtime/vendor/github.com/containerd/containerd/install.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/install.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/install.go:	introspectionapi "github.com/containerd/containerd/api/services/introspection/v1"
src/runtime/vendor/github.com/containerd/containerd/install.go:	"github.com/containerd/containerd/archive"
src/runtime/vendor/github.com/containerd/containerd/install.go:	"github.com/containerd/containerd/archive/compression"
src/runtime/vendor/github.com/containerd/containerd/install.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/install.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/install.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/install_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/install_opts.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/lease.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/lease.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/lease.go:	"github.com/containerd/containerd/leases"
src/runtime/vendor/github.com/containerd/containerd/leases/context.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/leases/grpc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/leases/grpc.go:	// GRPCHeader defines the header name for specifying a containerd lease.
src/runtime/vendor/github.com/containerd/containerd/leases/grpc.go:	GRPCHeader = "containerd-lease"
src/runtime/vendor/github.com/containerd/containerd/leases/id.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/leases/lease.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/leases/lease.go:		l.Labels["containerd.io/gc.expire"] = time.Now().Add(d).Format(time.RFC3339)
src/runtime/vendor/github.com/containerd/containerd/leases/proxy/manager.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/leases/proxy/manager.go:	leasesapi "github.com/containerd/containerd/api/services/leases/v1"
src/runtime/vendor/github.com/containerd/containerd/leases/proxy/manager.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/leases/proxy/manager.go:	"github.com/containerd/containerd/leases"
src/runtime/vendor/github.com/containerd/containerd/log/context.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/lookup_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/lookup_unsupported.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mount.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mount.go:// Mount is the lingua franca of containerd. A mount represents a
src/runtime/vendor/github.com/containerd/containerd/mount/mount_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mount_linux.go:	"github.com/containerd/containerd/sys"
src/runtime/vendor/github.com/containerd/containerd/mount/mount_linux.go:	// however, there is assumption that the common dir is ${root}/io.containerd.v1.overlayfs/snapshots.
src/runtime/vendor/github.com/containerd/containerd/mount/mount_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mount_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mountinfo.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mountinfo_bsd.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mountinfo_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/mountinfo_unsupported.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/temp.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/temp.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/mount/temp.go:	root, uerr := ioutil.TempDir(tempMountLocation, "containerd-mount")
src/runtime/vendor/github.com/containerd/containerd/mount/temp_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/mount/temp_unsupported.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/namespaces.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/namespaces.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/namespaces.go:	api "github.com/containerd/containerd/api/services/namespaces/v1"
src/runtime/vendor/github.com/containerd/containerd/namespaces.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/namespaces.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/namespaces/context.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/namespaces/context.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/namespaces/grpc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/namespaces/grpc.go:	// GRPCHeader defines the header name for specifying a containerd namespace.
src/runtime/vendor/github.com/containerd/containerd/namespaces/grpc.go:	GRPCHeader = "containerd-namespace"
src/runtime/vendor/github.com/containerd/containerd/namespaces/store.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/namespaces/validate.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/namespaces/validate.go:// containerd.
src/runtime/vendor/github.com/containerd/containerd/namespaces/validate.go:// identifiers and not conflict while using containerd.
src/runtime/vendor/github.com/containerd/containerd/namespaces/validate.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/oci/client.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/oci/client.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/oci/client.go:	"github.com/containerd/containerd/snapshots"
src/runtime/vendor/github.com/containerd/containerd/oci/spec.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/oci/spec.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/oci/spec.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/oci/spec.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/oci/spec.go:// for use as a containerd container
src/runtime/vendor/github.com/containerd/containerd/oci/spec.go:// for use as a containerd container in the platform requested.
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/oci/spec_opts.go:	"github.com/containerd/continuity/fs"
src/runtime/vendor/github.com/containerd/containerd/pkg/dialer/dialer.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/pkg/dialer/dialer_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/pkg/dialer/dialer_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/compare.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/cpuinfo.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/cpuinfo.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/platforms/cpuinfo.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/platforms/database.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/defaults.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/defaults_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/defaults_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/platforms.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/platforms/platforms.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/plugin/context.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/plugin/context.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/plugin/context.go:	"github.com/containerd/containerd/events/exchange"
src/runtime/vendor/github.com/containerd/containerd/plugin/context.go:// ordered, initialization set of plugins for a containerd instance.
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	// InternalPlugin implements an internal plugin to containerd
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	InternalPlugin Type = "io.containerd.internal.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	RuntimePlugin Type = "io.containerd.runtime.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	RuntimePluginV2 Type = "io.containerd.runtime.v2"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	ServicePlugin Type = "io.containerd.service.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	GRPCPlugin Type = "io.containerd.grpc.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	SnapshotPlugin Type = "io.containerd.snapshotter.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	TaskMonitorPlugin Type = "io.containerd.monitor.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	DiffPlugin Type = "io.containerd.differ.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	MetadataPlugin Type = "io.containerd.metadata.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	ContentPlugin Type = "io.containerd.content.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:	GCPlugin Type = "io.containerd.gc.v1"
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin.go:// Load loads all plugins at the provided path into containerd
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin_go18.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin_go18.go:// that containerd is built for inside the provided path
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin_go18.go:// the platform that containerd is running on
src/runtime/vendor/github.com/containerd/containerd/plugin/plugin_other.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/process.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/process.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/process.go:	"github.com/containerd/containerd/api/services/tasks/v1"
src/runtime/vendor/github.com/containerd/containerd/process.go:	"github.com/containerd/containerd/cio"
src/runtime/vendor/github.com/containerd/containerd/process.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/reference/reference.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/auth.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/authorizer.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/authorizer.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/authorizer.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/authorizer.go:	form.Set("client_id", "containerd-client")
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/fetcher.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/fetcher.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/fetcher.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/fetcher.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/httpreadseeker.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/httpreadseeker.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/httpreadseeker.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/pusher.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/pusher.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/pusher.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/pusher.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/pusher.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/pusher.go:	"github.com/containerd/containerd/remotes"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:	"github.com/containerd/containerd/reference"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:	"github.com/containerd/containerd/remotes"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:	"github.com/containerd/containerd/version"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/resolver.go:		options.Headers.Set("User-Agent", "containerd/"+version.Version)
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	"github.com/containerd/containerd/archive/compression"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	"github.com/containerd/containerd/remotes"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	labelDockerSchema1EmptyLayer = "containerd.io/docker.schema1.empty-layer"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	labels["containerd.io/gc.ref.content.0"] = manifest.Config.Digest.String()
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:		labels[fmt.Sprintf("containerd.io/gc.ref.content.%d", i+1)] = ch.Digest.String()
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:			"containerd.io/uncompressed": state.diffID.String(),
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	if _, err := c.contentStore.Update(ctx, cinfo, "labels.containerd.io/uncompressed", fmt.Sprintf("labels.%s", labelDockerSchema1EmptyLayer)); err != nil {
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:	diffID, ok := cinfo.Labels["containerd.io/uncompressed"]
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/schema1/converter.go:		log.G(ctx).WithField("id", desc.Digest).Warnf("failed to parse digest from label containerd.io/uncompressed: %v", diffID)
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/scope.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/scope.go:	"github.com/containerd/containerd/reference"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/status.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/status.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/remotes/docker/status.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/handlers.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/handlers.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/remotes/handlers.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/remotes/handlers.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/remotes/handlers.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/remotes/handlers.go:	"github.com/containerd/containerd/platforms"
src/runtime/vendor/github.com/containerd/containerd/remotes/resolver.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/remotes/resolver.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/rootfs/apply.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/rootfs/apply.go:	"github.com/containerd/containerd/diff"
src/runtime/vendor/github.com/containerd/containerd/rootfs/apply.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/rootfs/apply.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/rootfs/apply.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/rootfs/apply.go:	"github.com/containerd/containerd/snapshots"
src/runtime/vendor/github.com/containerd/containerd/rootfs/diff.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/rootfs/diff.go:	"github.com/containerd/containerd/diff"
src/runtime/vendor/github.com/containerd/containerd/rootfs/diff.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/rootfs/diff.go:	"github.com/containerd/containerd/snapshots"
src/runtime/vendor/github.com/containerd/containerd/rootfs/init.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/rootfs/init.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/rootfs/init.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/rootfs/init.go:	"github.com/containerd/containerd/snapshots"
src/runtime/vendor/github.com/containerd/containerd/rootfs/init_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/rootfs/init_other.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/events.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/1.0.pb.txt:  name: "github.com/containerd/containerd/linux/runctypes/runc.proto"
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/1.0.pb.txt:  package: "containerd.linux.runc"
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/1.0.pb.txt:    go_package: "github.com/containerd/containerd/linux/runctypes;runctypes"
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/next.pb.txt:  name: "github.com/containerd/containerd/runtime/linux/runctypes/runc.proto"
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/next.pb.txt:  package: "containerd.linux.runc"
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/next.pb.txt:    go_package: "github.com/containerd/containerd/runtime/linux/runctypes;runctypes"
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.pb.go:// source: github.com/containerd/containerd/runtime/linux/runctypes/runc.proto
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.pb.go:		github.com/containerd/containerd/runtime/linux/runctypes/runc.proto
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.pb.go:	proto.RegisterType((*RuncOptions)(nil), "containerd.linux.runc.RuncOptions")
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.pb.go:	proto.RegisterType((*CreateOptions)(nil), "containerd.linux.runc.CreateOptions")
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.pb.go:	proto.RegisterType((*CheckpointOptions)(nil), "containerd.linux.runc.CheckpointOptions")
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.pb.go:	proto.RegisterType((*ProcessDetails)(nil), "containerd.linux.runc.ProcessDetails")
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.pb.go:	proto.RegisterFile("github.com/containerd/containerd/runtime/linux/runctypes/runc.proto", fileDescriptorRunc)
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.proto:package containerd.linux.runc;
src/runtime/vendor/github.com/containerd/containerd/runtime/linux/runctypes/runc.proto:option go_package = "github.com/containerd/containerd/runtime/linux/runctypes;runctypes";
src/runtime/vendor/github.com/containerd/containerd/runtime/monitor.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/monitor.go:// TaskMonitor provides an interface for monitoring of containers within containerd
src/runtime/vendor/github.com/containerd/containerd/runtime/runtime.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/runtime.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/runtime/task.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/task_list.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/task_list.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/runtime/typeurl.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/typeurl.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/runtime/typeurl.go:	const prefix = "types.containerd.io"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/next.pb.txt:  name: "github.com/containerd/containerd/runtime/v2/runc/options/oci.proto"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/next.pb.txt:  package: "containerd.runc.v1"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/next.pb.txt:    go_package: "github.com/containerd/containerd/runtime/v2/runc/options;options"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.pb.go:// source: github.com/containerd/containerd/runtime/v2/runc/options/oci.proto
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.pb.go:		github.com/containerd/containerd/runtime/v2/runc/options/oci.proto
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.pb.go:	proto.RegisterType((*Options)(nil), "containerd.runc.v1.Options")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.pb.go:	proto.RegisterType((*CheckpointOptions)(nil), "containerd.runc.v1.CheckpointOptions")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.pb.go:	proto.RegisterType((*ProcessDetails)(nil), "containerd.runc.v1.ProcessDetails")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.pb.go:	proto.RegisterFile("github.com/containerd/containerd/runtime/v2/runc/options/oci.proto", fileDescriptorOci)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.proto:package containerd.runc.v1;
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/runc/options/oci.proto:option go_package = "github.com/containerd/containerd/runtime/v2/runc/options;options";
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/reaper_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/reaper_unix.go:	"github.com/containerd/containerd/sys"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/reaper_unix.go:	runc "github.com/containerd/go-runc"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	"github.com/containerd/containerd/events"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	"github.com/containerd/containerd/log"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	shimapi "github.com/containerd/containerd/runtime/v2/task"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	"github.com/containerd/ttrpc"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	StartShim(ctx context.Context, id, containerdBinary, containerdAddress string) (string, error)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	containerdBinaryFlag string
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	flag.StringVar(&addressFlag, "address", "", "grpc address back to main containerd")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	flag.StringVar(&containerdBinaryFlag, "publish-binary", "containerd", "path to publish binary (used for publishing events)")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:		containerdBinaryPath: containerdBinaryFlag,
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:		address, err := service.StartShim(ctx, idFlag, containerdBinaryFlag, addressFlag)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:			logrus.WithError(err).Fatal("containerd-shim: ttrpc server failure")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim.go:	containerdBinaryPath string
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_darwin.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_darwin.go:import "github.com/containerd/ttrpc"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_linux.go:	"github.com/containerd/containerd/sys"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_linux.go:	"github.com/containerd/ttrpc"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_unix.go:	"github.com/containerd/containerd/events"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_unix.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_unix.go:	"github.com/containerd/fifo"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_unix.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_unix.go:	cmd := exec.CommandContext(ctx, l.containerdBinaryPath, "--address", l.address, "publish", "--topic", topic, "--namespace", ns)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:	"github.com/containerd/containerd/events"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:	"github.com/containerd/ttrpc"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:	event := "Global\\containerd-shim-runhcs-v1-" + fmt.Sprint(os.Getpid())
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:// by using Windows Named Pipes for logging. When containerd restarts it tries
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:// be severed but when containerd starts up it should reconnect and start
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:// containerd.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:// containerd daemon to independently restart and reconnect to the logs.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:	l, err := winio.ListenPipe(fmt.Sprintf("\\\\.\\pipe\\containerd-shim-%s-%s-log", ns, id), nil)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/shim_windows.go:	cmd := exec.CommandContext(ctx, l.containerdBinaryPath, "--address", l.address, "publish", "--topic", topic, "--namespace", ns)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util.go:const shimBinaryFormat = "containerd-shim-%s-%s"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util.go:func Command(ctx context.Context, runtime, containerdAddress, path string, cmdArgs ...string) (*exec.Cmd, error) {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util.go:		"-address", containerdAddress,
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util.go:		return nil, fmt.Errorf("invalid runtime name %s, correct runtime name should format like io.containerd.runc.v1", runtime)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util_unix.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util_unix.go:	"github.com/containerd/containerd/sys"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util_unix.go:	return filepath.Join(string(filepath.Separator), "containerd-shim", ns, id, "shim.sock"), nil
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util_windows.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/shim/util_windows.go:	return fmt.Sprintf("\\\\.\\pipe\\containerd-shim-%s-%s-pipe", ns, id), nil
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:// source: github.com/containerd/containerd/runtime/v2/task/shim.proto
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:		github.com/containerd/containerd/runtime/v2/task/shim.proto
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:import containerd_types "github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:import containerd_v1_types "github.com/containerd/containerd/api/types/task"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:import ttrpc "github.com/containerd/ttrpc"
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	Rootfs           []*containerd_types.Mount `protobuf:"bytes,3,rep,name=rootfs" json:"rootfs,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	Status     containerd_v1_types.Status `protobuf:"varint,4,opt,name=status,proto3,enum=containerd.v1.types.Status" json:"status,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	Processes []*containerd_v1_types.ProcessInfo `protobuf:"bytes,1,rep,name=processes" json:"processes,omitempty"`
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*CreateTaskRequest)(nil), "containerd.task.v2.CreateTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*CreateTaskResponse)(nil), "containerd.task.v2.CreateTaskResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*DeleteRequest)(nil), "containerd.task.v2.DeleteRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*DeleteResponse)(nil), "containerd.task.v2.DeleteResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*ExecProcessRequest)(nil), "containerd.task.v2.ExecProcessRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*ExecProcessResponse)(nil), "containerd.task.v2.ExecProcessResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*ResizePtyRequest)(nil), "containerd.task.v2.ResizePtyRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*StateRequest)(nil), "containerd.task.v2.StateRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*StateResponse)(nil), "containerd.task.v2.StateResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*KillRequest)(nil), "containerd.task.v2.KillRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*CloseIORequest)(nil), "containerd.task.v2.CloseIORequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*PidsRequest)(nil), "containerd.task.v2.PidsRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*PidsResponse)(nil), "containerd.task.v2.PidsResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*CheckpointTaskRequest)(nil), "containerd.task.v2.CheckpointTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*UpdateTaskRequest)(nil), "containerd.task.v2.UpdateTaskRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*StartRequest)(nil), "containerd.task.v2.StartRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*StartResponse)(nil), "containerd.task.v2.StartResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*WaitRequest)(nil), "containerd.task.v2.WaitRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*WaitResponse)(nil), "containerd.task.v2.WaitResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*StatsRequest)(nil), "containerd.task.v2.StatsRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*StatsResponse)(nil), "containerd.task.v2.StatsResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*ConnectRequest)(nil), "containerd.task.v2.ConnectRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*ConnectResponse)(nil), "containerd.task.v2.ConnectResponse")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*ShutdownRequest)(nil), "containerd.task.v2.ShutdownRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*PauseRequest)(nil), "containerd.task.v2.PauseRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterType((*ResumeRequest)(nil), "containerd.task.v2.ResumeRequest")
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:		`Rootfs:` + strings.Replace(fmt.Sprintf("%v", this.Rootfs), "Mount", "containerd_types.Mount", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:		`Processes:` + strings.Replace(fmt.Sprintf("%v", this.Processes), "ProcessInfo", "containerd_v1_types.ProcessInfo", 1) + `,`,
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	srv.Register("containerd.task.v2.Task", map[string]ttrpc.Method{
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "State", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Create", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Start", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Delete", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Pids", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Pause", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Resume", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Checkpoint", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Kill", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Exec", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "ResizePty", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "CloseIO", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Update", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Wait", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Stats", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Connect", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Shutdown", req, &resp); err != nil {
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:			m.Rootfs = append(m.Rootfs, &containerd_types.Mount{})
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:				m.Status |= (containerd_v1_types.Status(b) & 0x7F) << shift
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:			m.Processes = append(m.Processes, &containerd_v1_types.ProcessInfo{})
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.pb.go:	proto.RegisterFile("github.com/containerd/containerd/runtime/v2/task/shim.proto", fileDescriptorShim)
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.proto:package containerd.task.v2;
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.proto:import "github.com/containerd/containerd/api/types/mount.proto";
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.proto:import "github.com/containerd/containerd/api/types/task/task.proto";
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.proto:option go_package = "github.com/containerd/containerd/runtime/v2/task;task";
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.proto:	repeated containerd.types.Mount rootfs = 3;
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.proto:	containerd.v1.types.Status status = 4;
src/runtime/vendor/github.com/containerd/containerd/runtime/v2/task/shim.proto:	repeated containerd.v1.types.ProcessInfo processes = 1;
src/runtime/vendor/github.com/containerd/containerd/services.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/services.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/services.go:	containersapi "github.com/containerd/containerd/api/services/containers/v1"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/api/services/diff/v1"
src/runtime/vendor/github.com/containerd/containerd/services.go:	imagesapi "github.com/containerd/containerd/api/services/images/v1"
src/runtime/vendor/github.com/containerd/containerd/services.go:	namespacesapi "github.com/containerd/containerd/api/services/namespaces/v1"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/api/services/tasks/v1"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/containers"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/leases"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/namespaces"
src/runtime/vendor/github.com/containerd/containerd/services.go:	"github.com/containerd/containerd/snapshots"
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:// Config provides containerd configuration data for the server
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:	// Root is the path to a directory where containerd will store persistent data
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:	// State is the path to a directory where containerd will store transient data
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:	// OOMScore adjust the containerd's oom score
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:	// Cgroup specifies cgroup information for the containerd daemon process
src/runtime/vendor/github.com/containerd/containerd/services/server/config/config.go:// LoadConfig loads the containerd server config from the provided path
src/runtime/vendor/github.com/containerd/containerd/signal_map_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/signal_map_linux.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/signal_map_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/signal_map_unix.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/signal_map_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/signal_map_windows.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/signals.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/signals.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/signals.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/signals.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/signals.go:// StopSignalLabel is a well-known containerd label for storing the stop
src/runtime/vendor/github.com/containerd/containerd/signals.go:const StopSignalLabel = "io.containerd.image.config.stop-signal"
src/runtime/vendor/github.com/containerd/containerd/signals.go:// well-known containerd label (StopSignalLabel)
src/runtime/vendor/github.com/containerd/containerd/snapshots/proxy/proxy.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/snapshots/proxy/proxy.go:	snapshotsapi "github.com/containerd/containerd/api/services/snapshots/v1"
src/runtime/vendor/github.com/containerd/containerd/snapshots/proxy/proxy.go:	"github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/snapshots/proxy/proxy.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/snapshots/proxy/proxy.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/snapshots/proxy/proxy.go:	"github.com/containerd/containerd/snapshots"
src/runtime/vendor/github.com/containerd/containerd/snapshots/proxy/proxy.go:// connection using the containerd snapshot GRPC API.
src/runtime/vendor/github.com/containerd/containerd/snapshots/snapshotter.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/snapshots/snapshotter.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/snapshotter_default_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/snapshotter_default_linux.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/snapshotter_default_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/snapshotter_default_unix.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/snapshotter_default_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/snapshotter_default_windows.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/sys/env.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/epoll.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/fds.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/filesys_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/filesys_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/mount_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/oom_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/oom_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/proc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/reaper.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/reaper_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/socket_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/socket_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/stat_bsd.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/stat_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/subprocess_unsafe_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/sys/subprocess_unsafe_linux.s:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/task.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/task.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/api/services/tasks/v1"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/cio"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/diff"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/plugin"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/containerd/rootfs"
src/runtime/vendor/github.com/containerd/containerd/task.go:	"github.com/containerd/typeurl"
src/runtime/vendor/github.com/containerd/containerd/task.go:// UnknownExitStatus is returned when containerd is unable to
src/runtime/vendor/github.com/containerd/containerd/task.go:	checkpointNameFormat = "containerd.io/checkpoint/%s:%s"
src/runtime/vendor/github.com/containerd/containerd/task.go:	// Created indicates the process has been created within containerd but the
src/runtime/vendor/github.com/containerd/containerd/task.go:// Task is the executable object within containerd
src/runtime/vendor/github.com/containerd/containerd/task.go:	// The metric types are generic to containerd and change depending on the runtime
src/runtime/vendor/github.com/containerd/containerd/task.go:	// For the built in Linux runtime, github.com/containerd/cgroups.Metrics
src/runtime/vendor/github.com/containerd/containerd/task.go:			"containerd.io/checkpoint": "true",
src/runtime/vendor/github.com/containerd/containerd/task.go:		labels[fmt.Sprintf("containerd.io/gc.ref.content.%d", i)] = m.Digest.String()
src/runtime/vendor/github.com/containerd/containerd/task_opts.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/task_opts.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/task_opts.go:	"github.com/containerd/containerd/api/types"
src/runtime/vendor/github.com/containerd/containerd/task_opts.go:	"github.com/containerd/containerd/content"
src/runtime/vendor/github.com/containerd/containerd/task_opts.go:	"github.com/containerd/containerd/errdefs"
src/runtime/vendor/github.com/containerd/containerd/task_opts.go:	"github.com/containerd/containerd/images"
src/runtime/vendor/github.com/containerd/containerd/task_opts.go:	"github.com/containerd/containerd/mount"
src/runtime/vendor/github.com/containerd/containerd/task_opts_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/task_opts_unix.go:package containerd
src/runtime/vendor/github.com/containerd/containerd/task_opts_unix.go:	"github.com/containerd/containerd/runtime/linux/runctypes"
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/go-runc 5a6d9f37cfa36b15efba46dc7ea349fa9b7143c3
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/console c12b1e7919c14469339a5d38f2f8ed9b64a9de23
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/cgroups 5e610833b72089b37d0e615de9a92dfc043757c2
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/typeurl a93fcdb778cd272c6e9b3028b2f42d813e785d40
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/fifo 3d5202aec260678c48179c56f40e6f38a095738c
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/btrfs 2e1aa0ddf94f91fa282b6ed87c23bf0d64911244
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/continuity bd77b46c8352f74eb12c85bdc01f4b90f69d66b4
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/ttrpc 2a805f71863501300ae1976d29f0454ae003e85a
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/cri f913714917d2456d7e65a0be84962b1ce8acb487 # release/1.2 branch
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/go-cni 40bcf8ec8acd7372be1d77031d585d5d8e561c90
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/zfs 9f6ef3b1fe5144bd91fe5855b4eba81bc0d17d03
src/runtime/vendor/github.com/containerd/containerd/vendor.conf:github.com/containerd/aufs da3cf16bfbe68ba8f114f1536a05c01528a25434
src/runtime/vendor/github.com/containerd/containerd/version/version.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/containerd/version/version.go:	Package = "github.com/containerd/containerd"
src/runtime/vendor/github.com/containerd/continuity/LICENSE:   Copyright The containerd Authors
src/runtime/vendor/github.com/containerd/continuity/fs/copy.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/copy_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/copy_linux.go:	"github.com/containerd/continuity/sysx"
src/runtime/vendor/github.com/containerd/continuity/fs/copy_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/copy_unix.go:	"github.com/containerd/continuity/sysx"
src/runtime/vendor/github.com/containerd/continuity/fs/copy_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/diff.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/diff_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/diff_unix.go:	"github.com/containerd/continuity/sysx"
src/runtime/vendor/github.com/containerd/continuity/fs/diff_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/dtype_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/du.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/du_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/du_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/hardlink.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/hardlink_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/hardlink_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/path.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/stat_darwinfreebsd.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/stat_linuxopenbsd.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/fs/time.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/sysx/generate.sh:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/sysx/nodata_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/sysx/nodata_solaris.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/sysx/nodata_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/sysx/xattr.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/continuity/sysx/xattr_unsupported.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/cri-containerd/pkg/api/runtimeoptions/v1/api.pb.go:Copyright 2019 The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/.travis.yml:  - pushd ..; git clone https://github.com/containerd/project; popd
src/runtime/vendor/github.com/containerd/fifo/Makefile:#   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/fifo.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/handle_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/handle_nolinux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/mkfifo_nosolaris.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/mkfifo_solaris.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/raw.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/fifo/readme.md:[![Build Status](https://travis-ci.org/containerd/fifo.svg?branch=master)](https://travis-ci.org/containerd/fifo)
src/runtime/vendor/github.com/containerd/fifo/readme.md:[![codecov](https://codecov.io/gh/containerd/fifo/branch/master/graph/badge.svg)](https://codecov.io/gh/containerd/fifo)
src/runtime/vendor/github.com/containerd/fifo/readme.md:The fifo is a containerd sub-project, licensed under the [Apache 2.0 license](./LICENSE).
src/runtime/vendor/github.com/containerd/fifo/readme.md:As a containerd sub-project, you will find the:
src/runtime/vendor/github.com/containerd/fifo/readme.md: * [Project governance](https://github.com/containerd/project/blob/master/GOVERNANCE.md),
src/runtime/vendor/github.com/containerd/fifo/readme.md: * [Maintainers](https://github.com/containerd/project/blob/master/MAINTAINERS),
src/runtime/vendor/github.com/containerd/fifo/readme.md: * and [Contributing guidelines](https://github.com/containerd/project/blob/master/CONTRIBUTING.md)
src/runtime/vendor/github.com/containerd/fifo/readme.md:information in our [`containerd/project`](https://github.com/containerd/project) repository.
src/runtime/vendor/github.com/containerd/go-runc/.travis.yml:  - pushd ..; git clone https://github.com/containerd/project; popd
src/runtime/vendor/github.com/containerd/go-runc/README.md:[![Build Status](https://travis-ci.org/containerd/go-runc.svg?branch=master)](https://travis-ci.org/containerd/go-runc)
src/runtime/vendor/github.com/containerd/go-runc/README.md:[![codecov](https://codecov.io/gh/containerd/go-runc/branch/master/graph/badge.svg)](https://codecov.io/gh/containerd/go-runc)
src/runtime/vendor/github.com/containerd/go-runc/README.md:Docs can be found at [godoc.org](https://godoc.org/github.com/containerd/go-runc).
src/runtime/vendor/github.com/containerd/go-runc/README.md:The go-runc is a containerd sub-project, licensed under the [Apache 2.0 license](./LICENSE).
src/runtime/vendor/github.com/containerd/go-runc/README.md:As a containerd sub-project, you will find the:
src/runtime/vendor/github.com/containerd/go-runc/README.md: * [Project governance](https://github.com/containerd/project/blob/master/GOVERNANCE.md),
src/runtime/vendor/github.com/containerd/go-runc/README.md: * [Maintainers](https://github.com/containerd/project/blob/master/MAINTAINERS),
src/runtime/vendor/github.com/containerd/go-runc/README.md: * and [Contributing guidelines](https://github.com/containerd/project/blob/master/CONTRIBUTING.md)
src/runtime/vendor/github.com/containerd/go-runc/README.md:information in our [`containerd/project`](https://github.com/containerd/project) repository.
src/runtime/vendor/github.com/containerd/go-runc/command_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/command_other.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/console.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/console.go:	"github.com/containerd/console"
src/runtime/vendor/github.com/containerd/go-runc/container.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/events.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/go.mod:module github.com/containerd/go-runc
src/runtime/vendor/github.com/containerd/go-runc/go.mod:	github.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e
src/runtime/vendor/github.com/containerd/go-runc/go.sum:github.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e h1:GdiIYd8ZDOrT++e1NjhSD4rGt9zaJukHm4rt5F4mRQc=
src/runtime/vendor/github.com/containerd/go-runc/go.sum:github.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e/go.mod h1:8Pf4gM6VEbTNRIT26AyyU7hxdQU3MvAvxVI0sc00XBE=
src/runtime/vendor/github.com/containerd/go-runc/io.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/io_unix.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/io_windows.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/monitor.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/runc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/go-runc/utils.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/.travis.yml:  - pushd ..; git clone https://github.com/containerd/project; popd
src/runtime/vendor/github.com/containerd/ttrpc/README.md:[![Build Status](https://travis-ci.org/containerd/ttrpc.svg?branch=master)](https://travis-ci.org/containerd/ttrpc)
src/runtime/vendor/github.com/containerd/ttrpc/README.md:ttrpc is a containerd sub-project, licensed under the [Apache 2.0 license](./LICENSE).
src/runtime/vendor/github.com/containerd/ttrpc/README.md:As a containerd sub-project, you will find the:
src/runtime/vendor/github.com/containerd/ttrpc/README.md: * [Project governance](https://github.com/containerd/project/blob/master/GOVERNANCE.md),
src/runtime/vendor/github.com/containerd/ttrpc/README.md: * [Maintainers](https://github.com/containerd/project/blob/master/MAINTAINERS),
src/runtime/vendor/github.com/containerd/ttrpc/README.md: * and [Contributing guidelines](https://github.com/containerd/project/blob/master/CONTRIBUTING.md)
src/runtime/vendor/github.com/containerd/ttrpc/README.md:information in our [`containerd/project`](https://github.com/containerd/project) repository.
src/runtime/vendor/github.com/containerd/ttrpc/channel.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/client.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/codec.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/config.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/handshake.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/interceptor.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/metadata.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/server.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/services.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/types.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/ttrpc/unixcreds_linux.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/typeurl/.travis.yml:    - pushd ..; git clone https://github.com/containerd/project; popd
src/runtime/vendor/github.com/containerd/typeurl/LICENSE:   Copyright The containerd Authors
src/runtime/vendor/github.com/containerd/typeurl/README.md:[![Build Status](https://travis-ci.org/containerd/typeurl.svg?branch=master)](https://travis-ci.org/containerd/typeurl)
src/runtime/vendor/github.com/containerd/typeurl/README.md:[![codecov](https://codecov.io/gh/containerd/typeurl/branch/master/graph/badge.svg)](https://codecov.io/gh/containerd/typeurl)
src/runtime/vendor/github.com/containerd/typeurl/README.md:**typeurl** is a containerd sub-project, licensed under the [Apache 2.0 license](./LICENSE).
src/runtime/vendor/github.com/containerd/typeurl/README.md:As a containerd sub-project, you will find the:
src/runtime/vendor/github.com/containerd/typeurl/README.md: * [Project governance](https://github.com/containerd/project/blob/master/GOVERNANCE.md),
src/runtime/vendor/github.com/containerd/typeurl/README.md: * [Maintainers](https://github.com/containerd/project/blob/master/MAINTAINERS),
src/runtime/vendor/github.com/containerd/typeurl/README.md: * and [Contributing guidelines](https://github.com/containerd/project/blob/master/CONTRIBUTING.md)
src/runtime/vendor/github.com/containerd/typeurl/README.md:information in our [`containerd/project`](https://github.com/containerd/project) repository.
src/runtime/vendor/github.com/containerd/typeurl/doc.go:   Copyright The containerd Authors.
src/runtime/vendor/github.com/containerd/typeurl/doc.go:// example, from the github.com/containerd/containerd/client package:
src/runtime/vendor/github.com/containerd/typeurl/doc.go://     const prefix = "types.containerd.io"
src/runtime/vendor/github.com/containerd/typeurl/doc.go:// to `types.containerd.io/opencontainers/runtime-spec/1/Spec` (or some other
src/runtime/vendor/github.com/containerd/typeurl/types.go:   Copyright The containerd Authors.
src/runtime/vendor/modules.txt:# github.com/containerd/cgroups v0.0.0-20190717030353-c4b9ac5c7601
src/runtime/vendor/modules.txt:github.com/containerd/cgroups
src/runtime/vendor/modules.txt:# github.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e
src/runtime/vendor/modules.txt:github.com/containerd/console
src/runtime/vendor/modules.txt:# github.com/containerd/containerd v1.2.1-0.20181210191522-f05672357f56
src/runtime/vendor/modules.txt:github.com/containerd/containerd
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/events
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/containers/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/content/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/diff/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/events/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/images/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/introspection/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/leases/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/namespaces/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/snapshots/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/tasks/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/services/version/v1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/types
src/runtime/vendor/modules.txt:github.com/containerd/containerd/api/types/task
src/runtime/vendor/modules.txt:github.com/containerd/containerd/archive
src/runtime/vendor/modules.txt:github.com/containerd/containerd/archive/compression
src/runtime/vendor/modules.txt:github.com/containerd/containerd/cio
src/runtime/vendor/modules.txt:github.com/containerd/containerd/containers
src/runtime/vendor/modules.txt:github.com/containerd/containerd/content
src/runtime/vendor/modules.txt:github.com/containerd/containerd/content/proxy
src/runtime/vendor/modules.txt:github.com/containerd/containerd/defaults
src/runtime/vendor/modules.txt:github.com/containerd/containerd/diff
src/runtime/vendor/modules.txt:github.com/containerd/containerd/errdefs
src/runtime/vendor/modules.txt:github.com/containerd/containerd/events
src/runtime/vendor/modules.txt:github.com/containerd/containerd/events/exchange
src/runtime/vendor/modules.txt:github.com/containerd/containerd/filters
src/runtime/vendor/modules.txt:github.com/containerd/containerd/identifiers
src/runtime/vendor/modules.txt:github.com/containerd/containerd/images
src/runtime/vendor/modules.txt:github.com/containerd/containerd/images/archive
src/runtime/vendor/modules.txt:github.com/containerd/containerd/leases
src/runtime/vendor/modules.txt:github.com/containerd/containerd/leases/proxy
src/runtime/vendor/modules.txt:github.com/containerd/containerd/log
src/runtime/vendor/modules.txt:github.com/containerd/containerd/mount
src/runtime/vendor/modules.txt:github.com/containerd/containerd/namespaces
src/runtime/vendor/modules.txt:github.com/containerd/containerd/oci
src/runtime/vendor/modules.txt:github.com/containerd/containerd/pkg/dialer
src/runtime/vendor/modules.txt:github.com/containerd/containerd/platforms
src/runtime/vendor/modules.txt:github.com/containerd/containerd/plugin
src/runtime/vendor/modules.txt:github.com/containerd/containerd/reference
src/runtime/vendor/modules.txt:github.com/containerd/containerd/remotes
src/runtime/vendor/modules.txt:github.com/containerd/containerd/remotes/docker
src/runtime/vendor/modules.txt:github.com/containerd/containerd/remotes/docker/schema1
src/runtime/vendor/modules.txt:github.com/containerd/containerd/rootfs
src/runtime/vendor/modules.txt:github.com/containerd/containerd/runtime
src/runtime/vendor/modules.txt:github.com/containerd/containerd/runtime/linux/runctypes
src/runtime/vendor/modules.txt:github.com/containerd/containerd/runtime/v2/runc/options
src/runtime/vendor/modules.txt:github.com/containerd/containerd/runtime/v2/shim
src/runtime/vendor/modules.txt:github.com/containerd/containerd/runtime/v2/task
src/runtime/vendor/modules.txt:github.com/containerd/containerd/services/server/config
src/runtime/vendor/modules.txt:github.com/containerd/containerd/snapshots
src/runtime/vendor/modules.txt:github.com/containerd/containerd/snapshots/proxy
src/runtime/vendor/modules.txt:github.com/containerd/containerd/sys
src/runtime/vendor/modules.txt:github.com/containerd/containerd/version
src/runtime/vendor/modules.txt:# github.com/containerd/continuity v0.0.0-20200413184840-d3ef23f19fbb
src/runtime/vendor/modules.txt:github.com/containerd/continuity/fs
src/runtime/vendor/modules.txt:github.com/containerd/continuity/sysx
src/runtime/vendor/modules.txt:# github.com/containerd/cri v1.11.1
src/runtime/vendor/modules.txt:github.com/containerd/cri/pkg/util
src/runtime/vendor/modules.txt:# github.com/containerd/cri-containerd v1.11.1-0.20190125013620-4dd6735020f5
src/runtime/vendor/modules.txt:github.com/containerd/cri-containerd/pkg/annotations
src/runtime/vendor/modules.txt:github.com/containerd/cri-containerd/pkg/api/runtimeoptions/v1
src/runtime/vendor/modules.txt:# github.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448
src/runtime/vendor/modules.txt:github.com/containerd/fifo
src/runtime/vendor/modules.txt:# github.com/containerd/go-runc v0.0.0-20200220073739-7016d3ce2328
src/runtime/vendor/modules.txt:github.com/containerd/go-runc
src/runtime/vendor/modules.txt:# github.com/containerd/ttrpc v1.0.0
src/runtime/vendor/modules.txt:github.com/containerd/ttrpc
src/runtime/vendor/modules.txt:# github.com/containerd/typeurl v1.0.1-0.20190228175220-2a93cfde8c20
src/runtime/vendor/modules.txt:github.com/containerd/typeurl
Binary file src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.git/index matches
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:name: critest containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:  # Run CRI tests against containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:  build-and-critest-containerd:
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:        runtime: [io.containerd.runtime.v1.linux, io.containerd.runc.v1, io.containerd.runc.v2, containerd-shim-runhcs-v1]
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          - runtime: io.containerd.runc.v1
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          - runtime: io.containerd.runc.v2
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          - runtime: io.containerd.runtime.v1.linux
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          - runtime: containerd-shim-runhcs-v1
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          - runtime: io.containerd.runc.v1
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          - runtime: io.containerd.runtime.v1.linux
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:      - name: Checkout containerd/containerd ${{matrix.version}}
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          path: ${{ github.workspace }}/src/github.com/containerd/containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          repository: containerd/containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:      - name: Install Linux dependencies for containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:      - name: Install containerd on Linux
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:        working-directory: ${{ github.workspace }}/src/github.com/containerd/containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:      - name: Install containerd on Windows
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:        working-directory: ${{ github.workspace }}/src/github.com/containerd/containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:        working-directory: src/github.com/containerd/containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          cd src/github.com/containerd/containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          GO111MODULE=on go build -mod=vendor -o "${bindir}/containerd-shim-runhcs-v1.exe" ./cmd/containerd-shim-runhcs-v1
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          WINCNI_BIN_DIR="${WINCNI_BIN_DIR:-"C:\\Program Files\\containerd\\cni\\bin"}"
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          CNI_CONFIG_DIR="${CNI_CONFIG_DIR:-"C:\\Program Files\\containerd\\cni\\conf"}"
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          bash -c 'cat >"'"${CNI_CONFIG_DIR}"'"/0-containerd-nat.conf <<EOF
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          echo "containerd temp dir: ${BDIR}"
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:            [plugins.cri.containerd.default_runtime]
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          sudo PATH=$PATH /usr/local/bin/containerd -a ${BDIR}/c.sock -root ${BDIR}/root -state ${BDIR}/state -log-level debug &> ${BDIR}/containerd-cri.log &
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          test $TEST_RC -ne 0 && cat ${BDIR}/containerd-cri.log
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          sudo pkill containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          containerd -log-level debug &> "${REPORT_DIR}/containerd-cri.log" &
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          critest --runtime-endpoint=npipe:////./pipe/containerd-containerd --ginkgo.focus="${FOCUS}" --ginkgo.skip="${SKIP}" --report-dir="${REPORT_DIR}" --report-prefix="windows"
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          test $TEST_RC -ne 0 && cat ${REPORT_DIR}/containerd.log
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:      - name: Upload containerd ${{matrix.version}} logs
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          name: containerd-${{matrix.version}}-${{ matrix.os }}-${{matrix.runtime}}-${{matrix.runc}}-${{github.sha}}.log
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/.github/workflows/containerd.yml:          path: ${{env.CONTD_CRI_DIR}}/containerd-cri.log
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/cmd/crictl/main_unix.go:var defaultRuntimeEndpoints = []string{"unix:///var/run/dockershim.sock", "unix:///run/containerd/containerd.sock", "unix:///run/crio/crio.sock"}
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/cmd/crictl/main_windows.go:var defaultRuntimeEndpoints = []string{"npipe:////./pipe/dockershim", "npipe:////./pipe/containerd", "npipe:////./pipe/crio"}
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/crictl.md:- `unix:///run/containerd/containerd.sock` or
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/crictl.md:- `npipe:////./pipe/containerd` or
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/crictl.md:  - containerd
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/crictl.md:Runtime handler requires runtime support. The following example shows running a pod sandbox with `runsc` handler on containerd runtime.
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/crictl.md:      "runtimeType": "io.containerd.runtime.v1.linux",
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/crictl.md:      "runtimeRoot": "/run/containerd/runsc"
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/developer-guide.md:- [Build tools](https://github.com/containerd/cri#install-dependencies)
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/developer-guide.md:## Build & install `containerd/cri`
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/developer-guide.md:The latest development version of `containerd` or CRI-O is required.
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/developer-guide.md:This guide will use `containerd/cri` as the container runtime. You may use CRI-O instead but you may need some additional steps to ensure it works. You can also follow the CRI-O [install guide](https://github.com/cri-o/cri-o/blob/master/install.md#install-packaged-versions-of-cri-o) if you prefer to use the packaged version.
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/docs/developer-guide.md:Follow the [`containerd/cri` dev guide](https://github.com/containerd/cri#getting-started-for-developers) to `make` and install the `containerd/cri` runtime.
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/cgroups v0.0.0-20200531161412-0dbf7f05ba59/go.mod h1:pA0z1pT8KYB3TCXK/ocprsh7MAkoW8bZVzPdih9snmM=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/console v0.0.0-20180822173158-c12b1e7919c1/go.mod h1:Tj/on1eG8kiEhd0+fhSDzsPAFESxzBBvdyEgyryXffw=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/console v1.0.0/go.mod h1:8Pf4gM6VEbTNRIT26AyyU7hxdQU3MvAvxVI0sc00XBE=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/containerd v1.3.2/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/containerd v1.4.1/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/continuity v0.0.0-20190426062206-aaeac12a7ffc/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/go-runc v0.0.0-20180907222934-5a6d9f37cfa3/go.mod h1:IV7qH3hrUgRmyYrtgEeGWJfWbgcHL9CSRruz2Vqcph0=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/ttrpc v0.0.0-20190828154514-0e0f228740de/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/ttrpc v1.0.2/go.mod h1:UAxOpgT9ziI0gJrmKvgcZivgxOp8iFPSk8httJEt98Y=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=
src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/go.sum:github.com/containerd/typeurl v1.0.1/go.mod h1:TB1hUtrpaiO88KEK56ijojHS1+NeF0izUACaJW2mdXg=
Binary file src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/_output/critest matches
Binary file src/runtime/vendor/src/github.com/kubernetes-incubator/cri-tools/_output/crictl matches
src/runtime/vendor/src/github.com/containernetworking/plugins/vendor/github.com/Microsoft/hcsshim/vendor.conf:github.com/containerd/console c12b1e7919c14469339a5d38f2f8ed9b64a9de23
src/runtime/vendor/src/github.com/containernetworking/plugins/vendor/github.com/Microsoft/hcsshim/vendor.conf:github.com/containerd/go-runc 5a6d9f37cfa36b15efba46dc7ea349fa9b7143c3
src/runtime/virtcontainers/cgroups.go:	"github.com/containerd/cgroups"
src/runtime/virtcontainers/cgroups_test.go:	"github.com/containerd/cgroups"
src/runtime/virtcontainers/clh.go:	"github.com/containerd/console"
src/runtime/virtcontainers/container.go:	"github.com/containerd/cgroups"
src/runtime/virtcontainers/container.go:	// stack, e.g. CRI-O, containerd. This is typically the
src/runtime/virtcontainers/documentation/api/1.0/api.md:	// stack, e.g. CRI-O, containerd. This is typically the
src/runtime/virtcontainers/fc.go:	"github.com/containerd/console"
src/runtime/virtcontainers/fc.go:	"github.com/containerd/fifo"
src/runtime/virtcontainers/persist/api/container.go:	// stack, e.g. CRI-O, containerd. This is typically the
src/runtime/virtcontainers/pkg/agent/protocols/client/client.go:	"github.com/containerd/ttrpc"
src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go:	github_com_containerd_ttrpc "github.com/containerd/ttrpc"
src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go:func RegisterAgentServiceService(srv *github_com_containerd_ttrpc.Server, svc AgentServiceService) {
src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go:	srv.Register("grpc.AgentService", map[string]github_com_containerd_ttrpc.Method{
src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go:	client *github_com_containerd_ttrpc.Client
src/runtime/virtcontainers/pkg/agent/protocols/grpc/agent.pb.go:func NewAgentServiceClient(client *github_com_containerd_ttrpc.Client) AgentServiceService {
src/runtime/virtcontainers/pkg/agent/protocols/grpc/health.pb.go:	github_com_containerd_ttrpc "github.com/containerd/ttrpc"
src/runtime/virtcontainers/pkg/agent/protocols/grpc/health.pb.go:func RegisterHealthService(srv *github_com_containerd_ttrpc.Server, svc HealthService) {
src/runtime/virtcontainers/pkg/agent/protocols/grpc/health.pb.go:	srv.Register("grpc.Health", map[string]github_com_containerd_ttrpc.Method{
src/runtime/virtcontainers/pkg/agent/protocols/grpc/health.pb.go:	client *github_com_containerd_ttrpc.Client
src/runtime/virtcontainers/pkg/agent/protocols/grpc/health.pb.go:func NewHealthClient(client *github_com_containerd_ttrpc.Client) HealthService {
src/runtime/virtcontainers/pkg/mock/mock.go:	"github.com/containerd/ttrpc"
src/runtime/virtcontainers/pkg/oci/utils.go:	criContainerdAnnotations "github.com/containerd/cri-containerd/pkg/annotations"
src/runtime/virtcontainers/sandbox.go:	"github.com/containerd/cgroups"
Binary file src/runtime/kata-runtime matches
Binary file src/runtime/containerd-shim-kata-v2 matches
Binary file src/runtime/kata-monitor matches
tools/agent-ctl/Cargo.lock:source = "git+https://github.com/containerd/ttrpc-rust?branch=0.3.0#ba1efe3bbb8f8af4895b7623ed1d11561e70e566"
tools/agent-ctl/Cargo.toml:ttrpc = { git = "https://github.com/containerd/ttrpc-rust", branch="0.3.0" }
tools/packaging/kata-deploy/README.md:a node only if it uses either containerd or CRI-O CRI-shims.
tools/packaging/kata-deploy/README.md:either CRI-O or containerd to register two `runtimeClasses`: `kata-qemu` (for QEMU isolation) and `kata-fc` (for Firecracker isolation).
tools/packaging/kata-deploy/README.md:As a final step the DaemonSet restarts either CRI-O or containerd. Upon deletion, the DaemonSet removes the
tools/packaging/kata-deploy/README.md:the `katacontainers.io/kata-runtime` label as well as restarts either CRI-O or `containerd` `systemctl`
tools/packaging/kata-deploy/action/Dockerfile:COPY kubernetes-containerd.json /
tools/packaging/kata-deploy/action/kubernetes-containerd.json:        "containerRuntime": "containerd",
tools/packaging/kata-deploy/action/kubernetes-containerd.json:        "containerdVersion": "1.2.4"
tools/packaging/kata-deploy/action/setup-aks.sh:CLUSTER_CONFIG=${CLUSTER_CONFIG:-/kubernetes-containerd.json}
tools/packaging/kata-deploy/kata-deploy/base/kata-deploy.yaml:        - name: containerd-conf
tools/packaging/kata-deploy/kata-deploy/base/kata-deploy.yaml:          mountPath: /etc/containerd/
tools/packaging/kata-deploy/kata-deploy/base/kata-deploy.yaml:        - name: containerd-conf
tools/packaging/kata-deploy/kata-deploy/base/kata-deploy.yaml:            path: /etc/containerd/
tools/packaging/kata-deploy/kata-deploy/overlays/k3s/mount_k3s_conf.yaml:        - name: containerd-conf
tools/packaging/kata-deploy/kata-deploy/overlays/k3s/mount_k3s_conf.yaml:            path: /var/lib/rancher/k3s/agent/etc/containerd/
tools/packaging/kata-deploy/scripts/kata-deploy.sh:containerd_conf_file="/etc/containerd/config.toml"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:containerd_conf_file_backup="${containerd_conf_file}.bak"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if echo "$runtime" | grep -qE 'containerd.*-k3s'; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	containerd | k3s | k3s-agent)
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		configure_containerd
tools/packaging/kata-deploy/scripts/kata-deploy.sh:function configure_containerd_runtime() {
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if grep -q "version = 2\>" $containerd_conf_file; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		pluginid=\"io.containerd.grpc.v1.cri\"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	local runtime_table="plugins.${pluginid}.containerd.runtimes.$runtime"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	local runtime_type="io.containerd.$runtime.v2"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if grep -q "\[$runtime_table\]" $containerd_conf_file; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		sed -i "/\[$runtime_table\]/,+1s#runtime_type.*#runtime_type = \"${runtime_type}\"#" $containerd_conf_file
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		cat <<EOT | tee -a "$containerd_conf_file"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if grep -q "\[$options_table\]" $containerd_conf_file; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		sed -i "/\[$options_table\]/,+1s#ConfigPath.*#ConfigPath = \"${config_path}\"#" $containerd_conf_file
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		cat <<EOT | tee -a "$containerd_conf_file"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:function configure_containerd() {
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	# Configure containerd to use Kata:
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	echo "Add Kata Containers as a supported runtime for containerd"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	mkdir -p /etc/containerd/
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if [ -f "$containerd_conf_file" ]; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		cp -n "$containerd_conf_file" "$containerd_conf_file_backup"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	configure_containerd_runtime
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	#Currently containerd has an assumption on the location of the shimv2 implementation
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	#Until support is added (see https://github.com/containerd/containerd/issues/3073),
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		configure_containerd_runtime $shim
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		local shim_binary="containerd-shim-kata-${shim}-v2"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:KATA_CONF_FILE=/opt/kata/share/defaults/kata-containers/configuration-${shim}.toml /opt/kata/bin/containerd-shim-kata-v2 \$@
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	containerd | k3s | k3s-agent)
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		cleanup_containerd
tools/packaging/kata-deploy/scripts/kata-deploy.sh:function cleanup_containerd() {
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	rm -f $containerd_conf_file
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if [ -f "$containerd_conf_file_backup" ]; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		mv "$containerd_conf_file_backup" "$containerd_conf_file"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	#Currently containerd has an assumption on the location of the shimv2 implementation
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	#Until support is added (see https://github.com/containerd/containerd/issues/3073), we manage
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		local shim_binary="containerd-shim-kata-${shim}-v2"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if [ "$1" == "crio" ] || [ "$1" == "containerd" ]; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		containerd_conf_tmpl_file="${containerd_conf_file}.tmpl"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		if [ ! -f "$containerd_conf_tmpl_file" ]; then
tools/packaging/kata-deploy/scripts/kata-deploy.sh:			cp "$containerd_conf_file" "$containerd_conf_tmpl_file"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		containerd_conf_file="${containerd_conf_tmpl_file}"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:		containerd_conf_file_backup="${containerd_conf_file}.bak"
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	# only install / remove / update if we are dealing with CRIO or containerd
tools/packaging/kata-deploy/scripts/kata-deploy.sh:	if [[ "$runtime" =~ ^(crio|containerd|k3s|k3s-agent)$ ]]; then
tools/packaging/release/runtime-release-notes.sh:	cri_containerd_version=$(get_from_kata_deps "externals.cri-containerd.version" "${new_release}")
tools/packaging/release/runtime-release-notes.sh:## Compatibility with cri-containerd
tools/packaging/release/runtime-release-notes.sh:Kata Containers ${runtime_version} is compatible with cri-contaienrd ${cri_containerd_version}
utils/README.md:configures Kata Containers and containerd.
utils/README.md:containerd. However, be aware of the following before proceeding:
utils/README.md:  and containerd from binary release packages. These versions may
utils/README.md:[the containerd installation guide](/docs/install/container-manager/containerd/containerd-install.md).
utils/README.md:To install and configure a system with Kata Containers and containerd, run:
utils/README.md:>   containerd already installed on it.
utils/README.md:>   pre-release versions (a Kata Containers version, and a containerd
utils/kata-manager.sh:readonly containerd_project="containerd"
utils/kata-manager.sh:readonly containerd_slug="containerd/containerd"
utils/kata-manager.sh:readonly containerd_project_url="https://github.com/${containerd_slug}"
utils/kata-manager.sh:readonly containerd_releases_url="https://api.github.com/repos/${containerd_slug}/releases"
utils/kata-manager.sh:# containerd shim v2 details
utils/kata-manager.sh:readonly kata_runtime_type="io.containerd.${kata_runtime_name}.v2"
utils/kata-manager.sh:readonly kata_shim_v2="containerd-shim-${kata_runtime_name}-v2"
utils/kata-manager.sh:# Systemd unit name for containerd daemon
utils/kata-manager.sh:readonly containerd_service_name="containerd.service"
utils/kata-manager.sh:  and $containerd_project from binary release packages. These versions may
utils/kata-manager.sh:Usage: $script_name [options] [<kata-version> [<containerd-version>]]
utils/kata-manager.sh:Description: Install $kata_project [1] and $containerd_project [2] from GitHub release binaries.
utils/kata-manager.sh:[2] - $containerd_project_url
utils/kata-manager.sh:	command -v containerd &>/dev/null \
utils/kata-manager.sh:		&& die "$containerd_project already installed"
utils/kata-manager.sh:		egrep -q "^${containerd_service_name}\>" \
utils/kata-manager.sh:		&& die "$containerd_project already installed"
utils/kata-manager.sh:install_containerd()
utils/kata-manager.sh:	local project="$containerd_project"
utils/kata-manager.sh:		"$containerd_releases_url" \
utils/kata-manager.sh:configure_containerd()
utils/kata-manager.sh:	local project="$containerd_project"
utils/kata-manager.sh:	local cfg="/etc/containerd/config.toml"
utils/kata-manager.sh:		"${containerd_slug}" \
utils/kata-manager.sh:		"${containerd_service_name}")
utils/kata-manager.sh:		tee -a "$containerd_service_name"
utils/kata-manager.sh:	local dest="${systemd_unit_dir}/${containerd_service_name}"
utils/kata-manager.sh:	sudo cp "${containerd_service_name}" "${dest}"
utils/kata-manager.sh:	# Backup the original containerd configuration:
utils/kata-manager.sh:		        [plugins.cri.containerd]
utils/kata-manager.sh:		    [plugins.cri.containerd.runtimes.${kata_runtime_name}]
utils/kata-manager.sh:	sudo systemctl start containerd
utils/kata-manager.sh:	# Allow the containerd service to find the Kata shim and users to find
utils/kata-manager.sh:handle_containerd()
utils/kata-manager.sh:	install_containerd "$version"
utils/kata-manager.sh:	configure_containerd
utils/kata-manager.sh:	containerd --version
utils/kata-manager.sh:	local containerd_version="${2:-}"
utils/kata-manager.sh:	handle_containerd "$containerd_version"
utils/kata-manager.sh:	info "$kata_project and $containerd_project are now installed"
utils/kata-manager.sh:	local containerd_version="${2:-}"
utils/kata-manager.sh:		"$containerd_version"
versions.yaml:  cri-containerd:
versions.yaml:    url: "github.com/containerd/cri"
versions.yaml:    tarball_url: "https://storage.googleapis.com/cri-containerd-release"
